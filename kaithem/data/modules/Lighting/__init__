continual: true
disabled: false
enable: true
once: true
priority: realtime
rate-limit: 0.0
resource-type: event
trigger: 'True'
versions: {}

#End metadata. Format: metadata, setup, action, delimited by --- on it's own line.
---
#This code runs once when the event loads. It also runs when you save the event during the test compile
#and may run multiple times when kaithem boots due to dependancy resolution
__doc__=''
import time,array,random,weakref, os,threading,uuid,logging,serial,traceback,yaml,copy,json

module.scenes = weakref.WeakValueDictionary()
 
module.scenes_by_name = weakref.WeakValueDictionary()

module.boards = []

module.universes= weakref.WeakValueDictionary()
module.lock = threading.RLock()
boardsListLock = threading.Lock()

module._activeScenes = []
module.activeScenes = []

module.runningTracks = weakref.WeakValueDictionary()

class ObjPlugin():
    pass
kaithem.lights = ObjPlugin()

module.controlValues = weakref.WeakValueDictionary()


blendmodes = weakref.WeakValueDictionary()

module.blendmodes = blendmodes

class exp_blendmode():
    "Ads random variation, basically a random time varying gel"
    default_channel_value = 165
    def __init__(self,scene):
        self.scene = scene
        self.affect = {}
        self.ntt = 0
        for i in self.scene.values:
            self.affect[i] = sorted(self.scene.values[i].keys())
        self.last = time.time()

    
    def frame(self,u,values):
      for k,v in enumerate(self.affect[u]):
          values[v] = ((values[v]**(self.scene.values[u][v]/100.0))/255.0**(self.scene.values[u][v]/100.0))*255
blendmodes['gamma'] = exp_blendmode


def getControlValue(cv,default=None):
    "Return numbers as is, or resolve values in the form of Universe:3 to the current value from that universe "
    if isinstance(cv,(float,int)):
        return cv
    else:
        try:
            cv = cv.split(":")
            x = cv[1].split("*")
            if len(x)> 1:
                multiplier = float(x[1])
            else:
                multiplier = 1.0
            return module.universes[cv[0]].values[int(x[0])]*multiplier
        except Exception as e:
            if not default is None:
                return default
            raise

module.fixtures = weakref.WeakValueDictionary()
fixtureschanged = {}

class Fixture():
    def __init__(self,name,channels=None):
        """Represents a contiguous range of channels each with a defined role in one universe.
           Each channel must be described by a (name, type, [arguments]) tuple, where type is one of:

           red
           green
           blue
           value
           X 
           Y
           enum
           bool
           fine

           The name must be unique per-fixture.
           If a channel has the type "fine" it will be interpreted as the fine value of
           the immediately preceding coarse channel, and should automatically get its value from the fractional part.
           If the coarse channel is not the immediate preceding channel, use the first argument to specify a name of the coarse channel.

           If the channel is enum, the first argument must be a list of (option_name, DMX_value) tuples.
           If the channel is Bool, the first argument may be a (trueval,falseval) tuple, or else 0,255 is used.

        
        """
        self.channels = channels or []
        self.universe = None
        self.startAddress = 0
        with module.lock:
            if name in module.fixtures:
                raise ValueError("Name in Use")
            else:
                    module.fixtures[name]=self
                    self.name=name

    def assign(self,universe, channel):
        with module.lock:
            if self.universe and self.startAddress:
                #Delete current assignments
                for i in range(self.startAddress,self.startAddress+len(self.channels)):
                    if i in module.universes[self.universe].channels:
                        if module.universes[self.universe].channels[i] is self:
                            del module.universes[self.universe].channels[i]

            if not universe in module.universes:
                    return
            #2 separate loops, first is just to check, so that we don't have half-completed stuff
            for i in range(channel,channel+len(self.channels)):
                if i in module.universes[universe].channels:
                    if module.universes[universe].channels[i]:
                        raise ValueError("channels would overlap with "+module.universes[universe].channels[i].name)

            for i in range(channel,channel+len(self.channels)):
                module.universes[universe].channels[i]= self
            self.universe = universe
            self.startAddress= channel
            global fixtureschanged
            module.universes[universe].channelsChanged()
            fixtureschanged = {}

class Universe():
    def __init__(self, name,count=512):
        for i in ":/[]()*\\`~!@#$%^&*=+|{}'\";<>.,":
            if i in name:
                raise ValueError("Name cannot contain special characters except _")
        self.name = name
        self.channels = {}
        self.groups ={}
        self.values = [0.0]*count
        self.count = count
        #Maps fine channel numbers to coarse channel numbers
        self.fine_channels = {}
        #Used for the caching
        self.highest_static_layer_last_frame = (0,0)
        module.universes[name] =self

        #flag to apply all scenes, even ones not marked as neding rerender
        self.full_rerender = False
        
        #The priority, started of the top layer layer that's been applied to this scene.
        self.top_layer= (0,0)

        #This is the priority, started of the "saved" layer that's been cached so we don't
        #Have to rerender it or anything below it.
        self.prerendered_layer= (0,0)


        #A copy of the state of the universe just after prerendered_layer was rendered, so we can go back
        #and start from there without rerendering lower layers.
        self.prerendered_data= [0.0]*count
        
        #Maybe there might be an iteration error. But it's just a GUI convienence that
        #A simple refresh solves, so ignore it.
        try:
            for i in module.boards:
                module.boards[i].pushUniverses()
        except Exception as e:
            print(e)
        
        #Deal with fixtures in this universe that aren't actually attached to this object yet.
        for i in range(0,5):
            try:
                for i in module.fixtures:
                    if module.fixtures[i].universe==self.name:
                        module.fixtures[i].assign(module.fixtures[i].universe,module.fixtures[i].startAddress)
            except RuntimeError:
                #Should there be some kind of dict changed size problem, retry
                time.sleep(0.1)
                    
    def channelsChanged(self):
        with module.lock:
            self.fine_channels = {}
            for i in self.channels:
                fixture = self.channels[i]
                data = fixture.channels[i-fixture.startAddress]
                if data[1]== "fine" and i>1:
                    self.fine_channels[i]= i-1
    
    def reset_to_cache(self):
        "Remove all changes since the prerendered layer."
        self.values = self.prerendered_data[:]
        self.top_layer = self.prerendered_layer
    
    def save_prerendered(self, p, s):
        self.prerendered_layer = (p,s)
        self.prerendered_data  = self.values[:]
    
    def reset(self):
        self.prerendered_layer = (0,0)
        self.values = array.array("f",[0.0]*self.count)
        self.top_layer = (0,0)

    
    def preFrame(self):
        "Frame preprocessor, uses fixture-specific info, generally only called under lock"
        #Assign fine channels their value based on the coarse channel
        for i in self.fine_channels:
            self.values[i] = (self.values[self.fine_channels[i]]%1)*255


    def onFrame(self):
        pass

class LightBoard():
    def __init__(self, count=65536):

        self.newDataFunctions = []

        self.id = uuid.uuid4().hex
        self.link = kaithem.widget.APIWidget("api_link")
        self.link.require("lights/lightboard.admin")
        self.link.echo=False
        #mutable and immutable versions of the active scenes list.
        self._activeScenes = []
        self.activeScenes = []
        
        #This light board's scene memory, or the set of scenes 'owned' by this board.
        self.scenememory = {}
        
        self.ext_scenes = {}          
        
        self.count = count
        #Bound method weakref nonsense prevention
        self.onmsg = lambda x,y: self._onmsg(x,y)
        self.link.attach(self.onmsg)
        self.lock = threading.Lock()
        
        sd = kaithem.registry.get("lightboard/default_setupV2",{})
        for i in sd:
            self.scenememory[i] = Scene(id=i,**sd[i])

    def loadSceneFile(self,data):
        data = yaml.load(data)
        with self.lock:
            x = list(self.scenememory.keys())
            for i in x:
                try:
                    self.scenememory[i].stop()
                    try:
                        del self.scenememory[i]
                    except:
                        pass
                except:
                    pass
            for i in data:
                self.scenememory[i] = Scene(id=i,**data[i])
            
            
    def addScene(self,scene):
        self.scenememory[scene.id] = scene
    def rmScene(self,scene):
        try:
            del self.scenememory[scene.id]
        except:
            pass
    def pushUniverses(self):
        self.link.send(["universes",{i:len(module.universes[i].values) for i in module.universes}])   

    def getScenes(self):
        "Return serializable version of scenes list"
        with self.lock:
            sd = {}
            for i in self.scenememory:
                sd[i] = {   
                             'name':self.scenememory[i].name,
                             'alpha':self.scenememory[i].defaultalpha,
                             'values':self.scenememory[i].values,
                             'fadeout':self.scenememory[i].fadeout,
                             'length':self.scenememory[i].length,
                             'fadein':self.scenememory[i].fadein,
                             'overlap':self.scenememory[i].overlap,
                             'nextScene':self.scenememory[i].nextScene,
                             'priority'  : self.scenememory[i].priority,
                             'defaultActive': self.scenememory[i].defaultActive,
                             'track':  self.scenememory[i].track,
                             'blend':  self.scenememory[i].blend,
                             'blendArgs': self.scenememory[i].blendArgs

                            }
            return sd
    
    def save(self):
        sd = self.getScenes()
        with self.lock:                               
            kaithem.registry.set("lightboard/scenes",sd)
    
    def pushTracks(self):
        self.link.send(['tracks',{i:module.runningTracks[i].name for i in module.runningTracks}])

    def pushChannelNames(self,u):
        if u in module.universes:
            d = {}
            for i in module.universes[u].channels:
                fixture = module.universes[u].channels[i]
                data= (fixture.name,)+fixture.channels[i-fixture.startAddress]
                d[i]=data

            self.link.send(['cnames',u,d])

    def pushMeta(self,sceneid):
        scene = module.scenes[sceneid]
        self.link.send(["scenemeta",sceneid,     
                         {
                          'ext':not sceneid in self.scenememory ,
                          'dalpha':scene.defaultalpha,
                          'alpha':scene.alpha,
                          'active': scene.isActive(),
                          'defaultActive': scene.defaultActive,
                          'name':scene.name,
                          'blend':scene.blend,
                          'blendArgs': scene.blendArgs,
                          'blendParams': scene.blendClass.parameters if hasattr(scene.blendClass,"parameters") else {},
                          'priority': scene.priority,
                          'started':  scene.started
                }])
                
    def pushCueMeta(self,cueid):
        cue = cues[cueid]
        self.link.send(["cuemeta",cueid,     
                         {'fadeout':cue.fadeout, 
                          'fadein':cue.fadein, 
                          'alpha':cue.alpha,
                          'length':cue.length,
                          'next':cue.nextCue,
                          'name': cue.name,
                          'scene': cue.scene().id                          
                          }])
    def pushCueData(self, cueid):
        self.link.send(["cuedata",cues[cueid].id,cues[cueid].values])

    def pushCueList(self,scene):
        s = module.scenes[msg[1]]
        self.link.send(["scenecues",scene,{i:s.cues[i].id for i in s.cues.keys()}])

    def _onmsg(self,user,msg):
        #Adds a light to a scene
        try:
            if msg[0] == "addscene":
                s = Scene(msg[1])
                self.scenememory[s.id]=s
                self.link.send(["newscene",msg[1],s.id])

            if msg[0] == "addmonitor":
                s = Scene(msg[1],blend="monitor",priority=100)
                self.scenememory[s.id]=s
                self.link.send(["newscene",msg[1],s.id])   

            if msg[0] == "clonescene":
                s = Scene(msg[2])
                self.scenememory[s.id]=s
                s0 =module.scenes[msg[1]]
                s.values = copy.deepcopy(s0.values)
                s.fadein = s0.fadein
                s.length = s0.length
                s.defaultalpha = s0.defaultalpha
                s.track = s0.track
                s.setBlend(s0.blend)
                s.blendArgs = s0.blendArgs.copy()

                self.link.send(["newscene",msg[1],s.id])

            if msg[0] == "getcnames":
                self.pushChannelNames(msg[1])

            if msg[0] == "namechannel":
                if msg[3]:
                    module.universes[msg[1]].channels[msg[2]] = msg[3]
                else:
                    del module.universes[msg[1]].channels[msg[2]]

                
            if msg[0] == "addcueval":
                if hasattr(cues[msg[1]].scene().blendClass,'default_channel_value'):
                    val = cues[msg[1]].scene().blendClass.default_channel_value
                else:
                    val = 0
                cues[msg[1]].setValue(msg[2],msg[3],val)
                self.pushCueData(msg[1])

            if msg[0] == "rmsceneval":
                del module.scenes[msg[1]].values[msg[2]][msg[3]]
                s = self.scenememory[msg[1]]
                self.link.send(["scenedata",msg[1],s.values])  

            if msg[0] == "setscenelight":
                module.universes[msg[1]][msg[2]]=float(msg[3])

            if msg[0] == "gsd":
                s = module.scenes[msg[1]]
                self.link.send(["scenecues",msg[1],{i:s.cues[i].id for i in s.cues.keys()}])
                self.pushMeta(msg[1])
                for i in s.cues:
                    self.pushCueMeta(s.cues[i].id)
                    self.link.send(["cuedata",s.cues[i].id,s.cues[i].values])

            if msg[0] == "getcuedata":
                s = cues[msg[1]]
                self.link.send(["cuedata",msg[1],s.values])
                self.pushCueMeta(msg[1])

            if msg[0] == "gasd":
                with self.lock:
                    self.pushUniverses()
                    for i in self.scenememory:
                        s = self.scenememory[i]
                        self.link.send(["scenecues",i,{i:s.cues[i].id for i in s.cues.keys()}])
                        self.pushMeta(i)
                        for i in s.cues:
                            self.pushCueMeta(s.cues[i].id)
                            self.link.send(["cuedata",i,s.values])


                    for i in module.activeScenes:
                        #Tell clients about any changed alpha values and stuff.
                        if not i.id in self.scenememory:
                            self.pushMeta(i.id)


            #There's such a possibility for an iteration error if universes changes.
            #I'm not going to worry about it, this is only for the GUI list of universes.
            if msg[0] == "getuniverses":
                self.pushUniverses()
            if msg[0] == "scv":
                cues[msg[1]].setValue(msg[2],msg[3],msg[4])
                self.link.send(["ssv",msg[1],msg[2],msg[3],msg[4]])

            if msg[0] == "setalpha":
                module.scenes[msg[1]].setAlpha(msg[2])
                
            if msg[0] == "setdalpha":
                module.scenes[msg[1]].setAlpha(msg[2],sd=True)

            if msg[0] == "addcue":
                module.scenes[msg[1]].addCue(msg[2])

            if msg[0] == "rmcue":
                c = cues[msg[1]]
                c.scene().rmCue(c.id)
                         
            if msg[0] == "setfadein":
                try:
                    v=float(msg[2])
                except:
                    v=msg[2]
                cues[msg[1]].fadein=v
                self.pushCueMeta(msg[1])
                
            if msg[0] == "setdefaultactive":
                module.scenes[msg[1]].defaultActive=bool(msg[2])
                self.pushMeta(msg[1])
                
            if msg[0] == "setlength":
                try:
                    v=float(msg[2])
                except:
                    v=msg[2][:256]
                cues[msg[1]].length=v
                self.pushCueMeta(msg[1])
                               
            if msg[0] == "setoverlap":
                module.scenes[msg[1]].overlap=msg[2]
                self.pushMeta(msg[1])

            if msg[0] == "setnext":
                cues[msg[1]].nextCue= msg[2][:1024]
                self.pushCueMeta(msg[1])

            if msg[0] == "setblend":
                module.scenes[msg[1]].setBlend(msg[2])
            if msg[0] == "setblendarg":
                module.scenes[msg[1]].setBlendArg(msg[2],msg[3])

            if msg[0] == "setfadeout":
                try:
                    v=float(msg[2])
                except:
                    v=msg[2][:256]
                cues[msg[1]].fadeout = v
                self.pushCueMeta(msg[1])
                
            if msg[0] == "setpriority":
                module.scenes[msg[1]].setPriority(msg[2])  

            if msg[0] == "setscenename":
                module.scenes[msg[1]].setName(msg[2])  
                   
            if msg[0] == "del":
                module.scenes[msg[1]].stop()
                self.delscene(msg[1])
                
            if msg[0] == "go":
                module.scenes[msg[1]].go()
                self.pushMeta(msg[1])
                
            if msg[0] == "gobyname":
                module.scenes_by_name[msg[1]].go()
                self.pushMeta(module.scenes_by_name[msg[1]].id)
                
            if msg[0] == "stopbyname":
                module.scenes_by_name[msg[1]].stop()
                self.pushMeta(msg[1])
                
            if msg[0] == "togglebyname":
                if module.scenes_by_name[msg[1]].isActive():
                    module.scenes_by_name[msg[1]].stop()
                else:
                    module.scenes_by_name[msg[1]].go()
                self.pushMeta(msg[1])
                
            if msg[0] == "stop":
                module.scenes[msg[1]].stop()
                self.pushMeta(msg[1])

                
            if msg[0] == "end":
                module.scenes[msg[1]].end()
            if msg[0] == "next":
                try:
                    module.runningTracks[msg[1]].end()
                except:
                    pass                
        except Exception as e:
            print(msg,traceback.format_exc(8))
            
    def setChannelName(self,id,name="Untitled"):
        self.channelNames[id]=name
        
    def delscene(self,sc):
        i=None
        with self.lock:
            if sc in self.scenememory:
                i = self.scenememory.pop(sc)
        if i:   
             self.link.send(["del",i.id])  


    def guiPush(self):
        with self.lock:
            for i in self.newDataFunctions:
                i(self)
            self.newDataFunctions = []

            for i in self.scenememory:
                #Tell clients about any changed alpha values and stuff.
                if not self.id in self.scenememory[i].hasNewInfo:
                    self.pushMeta(i)
                    self.scenememory[i].hasNewInfo[self.id]=False

                #special case the monitor scenes.
                if self.scenememory[i].blend=="monitor" and self.scenememory[i].isActive() and self.id not in self.scenememory[i].valueschanged:
                    self.scenememory[i].valueschanged[self.id]=True
                    self.link.send(["cuedata",self.scenememory[i].cue.id, self.scenememory[i].cue.values])
                    
            for i in module.activeScenes:
                #Tell clients about any changed alpha values and stuff.
                if not self.id in i.hasNewInfo:
                    self.pushMeta(i.id)
                    i.hasNewInfo[self.id]=False

def applyLayer(universe, uvalues,scene):
    data = scene.effectiveValues or scene.values
    sceneuniverse = data[universe]

    vals = scene.canvas.v2[universe]
    alphas = scene.canvas.a2[universe]

    if scene.blend =="normal":
        for k,v in enumerate(vals):
            uvalues[k] = (uvalues[k]*(1-alphas[k]*scene.alpha)) +  (v*(scene.alpha))

    elif scene.blend == "HTP":
        for k,v in enumerate(vals):
            uvalues[k] = max(uvalues[k], v*(alphas[k]*scene.alpha))

    elif scene.blend == "inhibit":
        for k,v in enumerate(vals):
            uvalues[k] = min(uvalues[k], v*(alphas[k]*scene.alpha))
    elif scene.blend == "gel" or scene.blend=="multiply":
        for k,v in enumerate(vals):
            if scene.alpha:
                #precompute constants
                c= 255/scene.alpha
                uvalues[k] = (uvalues[k]*(1-alphas[k]*scene.alpha)) + (uvalues[k]*v)/c
                
    elif scene.blend == "monitor":
        for k,v in sceneuniverse.items():
            sceneuniverse[k] = uvalues[k]
        scene.valueschanged = {}

    elif scene._blend:
        #Values is mutable, the function mutates it
        scene._blend.frame(universe,uvalues)


def pre_render():
    "Reset all universes to either the all 0s background or the cached layer, depending on if the cache layer is still valid"
    #Here we find out what universes can be reset to a cached layer and which need to be fully rerendered.
    changedUniverses = {}
    to_reset ={}
    universes = module.universes
    #Important to reverse, that way scenes that need a full reset come after and don't get overwritten
    for i in reversed(module.activeScenes):
        if i.visible:
            for u in i.values:
                if u in universes:
                    universe = universes[u]
                    universe.highest_static_layer_this_frame = (0,0)
                    if i.rerender:
                        if ((i.priority,i.started) <= universe.prerendered_layer):
                            to_reset[u]=1
                        else:
                            #We are stacking on another layer or changing the top layer. We don't need
                            #To rerender the entire stack, we just start from the prerendered_layer
                            #Set the universe to the state it was in just after the prerendered layer was rendered.
                            #Since the values are mutable, we need to set this back every frame

                            #Don't overwrite a request to reset the entire thing
                            if not to_reset.get(u,0)==1:
                                to_reset[u]=2
    for u in universes:
        if universes[u].full_rerender:
            to_reset[u]=1

    for u in to_reset:
        if to_reset[u]==1:
            universes[u].reset()
            changedUniverses[u]=(0,0)
        else:
            universes[u].reset_to_cache()         
    return changedUniverses

def render(t=None):
    changedUniverses = pre_render()
  
    t = t or time.time()
  
    #Remember that scenes get rendered in ascending priority order here
    for i in module.activeScenes:
        if i.visible:
            #We want to set this False early because a lot of things
            #can set it back to true, but also a lot of things need to check it
            #so we copy it.
            rerender_this_frame = i.rerender
            data =i.effectiveValues or i.values

            i.rerender = False

            #We don't need to call render() if the frame is a static scene and the opacity
            #and all that is the same, we can just re-layer it on top of the values
            if rerender_this_frame or (i.cue.length and ((time.time()-i.enteredCue)>i.cue.length)):
                i.render()

            #Loop over universes the scene affects
            for u in data:
                if not u in module.universes:
                    continue
                
                if rerender_this_frame or ((i.priority,i.started) > module.universes[u].top_layer) or module.universes[u].full_rerender:
                    changedUniverses[u]=(i.priority, i.started)
                    if not u in module.universes:
                        continue
                    
                    universe = module.universes[u]
                    applyLayer(u, universe.values, i)
                    universe.top_layer = (i.priority, i.started)
                    
                    #If we aren't going to rerender something, we can save the current position as that universe's
                    #Background state.

                    #We don't use rerender_this_frame, because what we're interested in is if anything set it to True,
                    #making us have to rerender it next frame, defeating the entire purpose of the cache.

                    #This is a bizzare runtime optimization that takes the data from last frame about what the highest
                    #cacheable layer is, and saves that exact layer if it's still around, but only of it doesn't need rerendering.
                    if not i.rerender and module.universes[u].highest_static_layer_last_frame==(i.priority,i.started):
                        module.universes[u].save_prerendered(*changedUniverses[u])


                    if i.rerender:
                        if module.universes[u].highest_static_layer_this_frame:
                            #Copy it and set to none as a flag that we already found it
                            module.universes[u].highest_static_layer_last_frame = module.universes[u].highest_static_layer_this_frame
                            module.universes[u].highest_static_layer_this_frame = None
                    else:
                        #If we're still looking for the highest purely static layer that we can cache
                        if module.universes[u].highest_static_layer_this_frame:
                            module.universes[u].highest_static_layer_this_frame = max((i.priority,i.started), module.universes[u].highest_static_layer_this_frame)

    for i in changedUniverses:
        try:
            if i in module.universes:
                module.universes[i].preFrame()
                module.universes[i].onFrame()
   
        except:
            raise
    for i in module.universes:
        module.universes[i].full_rerender  =False
    changedUniverses={}

class FadeCanvas():
    def __init__(self):
        "Handles calculating the effect of one scene over a background. This doesn't do blend modes, it just interpolates."
        self.v = {}
        self.a = {}
        self.v2 = {}
        self.a2 = {}

        for u in module.universes:
            self.v[u] = [0]* len(module.universes[u].values)
            self.a[u] = [0]* len(module.universes[u].values)
            self.v2[u] = [0]* len(module.universes[u].values)
            self.a2[u] = [0]* len(module.universes[u].values)
    
    def paint(self,scene,fade):
        for i in scene.values:
            if i in self.v:
                for j in scene.values[i]:
                    self.v2[i][j]= self.v[i][j]*(1-fade) + fade*scene.values[i][j]
                    self.a2[i][j]= self.a[i][j]*(1-fade) + fade*scene.alpha

    def save(self):
        self.v = self.v2
        self.a = self.a2
        self.v = {}
        self.a = {}
        for i in module.universes:
            self.v[u] = [0]* len(module.universes[i].values)
            self.a[u] = [0]* len(module.universes[i].values)

cues =weakref.WeakValueDictionary()

class Cue():
    "A static set of values with a fade in and out duration"
    def push(self):
        for i in module.boards:
            if len(i().newDataFunctions)<100:
                i().newDataFunctions.append(lambda s:s.pushCueMeta(self.id))

    def __init__(self,parent,name=None, values={}, alpha=1,fadein=0, fadeout=0, length=0,nextCue = None):
        #This is so we can loop through them and push to gui
        self.id = random.random()+time.time()
        cues[self.id] =self
        self.changed= {}
        self.alpha = alpha
        self.fadein =fadein
        self.fadeout= fadeout
        self.length = length
        self.name = name
        self.values = values
        self.scene = weakref.ref(parent)
        self.nextCue = nextCue
        self.push()

    def setValue(self,universe,channel,value):
            self.scene().rerender = True
            reset = False
            #TODO: threadsafe?
            if not universe in self.values:
                self.values[universe] = {}
                reset = True
            if not channel in self.values[universe]:
                reset = True
            self.values[universe][channel] = value
            #For blend modes that don't like it when you
            #change the list of values without resetting
            if reset:
                self.scene().setBlend(self.scene().blend)

class Scene():
    "An objecting representing one scene"
    def __init__(self,name=None, values=None, active=False, alpha=1, priority= 50,
                 visible=True, blend="normal",id=None, defaultActive=False,blendArgs=None):

        if name and name in module.scenes_by_name:
            raise RuntimeError("Cannot have 2 scenes sharing a name")

        #Only used for monitor scenes
        self.valueschanged = {}
        #Place to stash a blend object for new blending mode
        self._blend = None
        self.blendClass = None
        self.alpha = alpha if defaultActive else 0
        self.active = False
        self.defaultalpha = alpha
        self.name = name
        self.values = values or {}
        self.cues = {'default': Cue(self,"default",self.values)}
        self.enteredCue = 0

        self.priority = priority
        self.visible = visible
        #Used by blend modes
        self.blendArgs = blendArgs or {}
        self.setBlend(blend)
        self.defaultActive = False

        #Used to indicate that the most recent frame has changed something about the scene
        #Metadata that GUI clients need to know about.
        self.hasNewInfo = {}
        
        #Set to true every time the alpha value changes or a scene value changes
        #set to false at end of rendering
        self.rerender = False
        
        #Last time the scene was started. Not reset when stopped
        self.started = 0
        
        self.id = id or uuid.uuid4().hex
        if name:
               module.scenes_by_name[self.name] = self
        if not name:
            name = self.id
        module.scenes[self.id] = self

        if active:
            self.go()
            if isinstance(active, float):
                self.started = time.time()-active

    def rmCue(self,cue):
        if cue in cues:
            id = cue
            del self.cues[cues[cue].name]
        elif cue in self.cues:
            id = self.cues[cue].id
            del self.cues[cue]
        for i in module.boards:
            if len(i().newDataFunctions)<100:
                i().newDataFunctions.append(lambda s:s.link.send(["delcue",id]))

    def pushCues(self):
        for i in module.boards:
            if len(i().newDataFunctions)<100:
                i().newDataFunctions.append(lambda s:pushCueList(i.id))

    def addCue(self,name,prev=None):
        if name in self.cues:
            raise RuntimeError("Cue would overwrite existing.")
        self.cues[name]= Cue(self,name)
        if prev and prev in self.cues:
            self.cues[prev].nextCue= self.cues[name]

        for i in module.boards:
            if len(i().newDataFunctions)<100:
                i().newDataFunctions.append(lambda s:s.pushCueMeta(self.cues[name].id))      

    def gotoCue(self, cue):
        self.cue = self.cues[cue]
        self.enteredCue = time.time()

    def setupBlendArgs(self):
        if hasattr(self.blendClass,"parameters"):
            for i in self.blendClass.parameters:
                if not i in self.blendArgs:
                    self.blendArgs[i] = self.blendClass.parameters[i][3]
                

    def go(self,t=None,nohandoff=False):
        with module.lock:
            if self in module.activeScenes and not self.doingHandoff:
                return

            self.canvas = FadeCanvas()
            self.cue = self.cues['default']
            if not self.cue.fadein:
                self.fadePosition =1
            else:
                self.fadePosition =0

            if self.blend in blendmodes:
                self._blend = blendmodes[self.blend](self)

            self.rerender = True

            self.effectiveValues = None

            self.hasNewInfo = {}
            t =t or time.time()
            self.started = t

            self.manualAlpha = False
            self.alpha = self.defaultalpha

            if not self in module._activeScenes:
                module._activeScenes.append(self)
            module._activeScenes = sorted(module._activeScenes,key=lambda k: (k.priority, k.started))
            module.activeScenes = module._activeScenes[:]
            self.active =True
        
        
    def isActive(self):
        return self.active
    
    def setPriority(self,p):
        self.hasNewInfo = {}
        self.priority = p
        with module.lock:
            module._activeScenes = sorted(module._activeScenes,key=lambda k: (k.priority, k.started))
            module.activeScenes = module._activeScenes[:] 
 
    def setName(self,name):
        if self.name=="":
            raise ValueError("Cannot name scene an empty string")
        if not isinstance(name, str):
            raise TypeError("Name must be str")
        with module.lock:
            if name in module.scenes_by_name:
                raise ValueError("Name in use")
            if self.name in module.scenes_by_name:
                del module.scenes_by_name[self.name]
            self.name = name
            module.scenes_by_name[name]=self
            self.hasNewInfo = {}

    def stop(self):
        with module.lock:
            #No need to set rerender
            self._blend =None
            self.hasNewInfo = {}
            self.canvas = None

            #The renderer needs some way to know something has changed
            for i in self.values:
                if i in module.universes:
                    module.universes[i].full_rerender = True

            module._activeScenes.remove(self)
            module.activeScenes = module._activeScenes[:]

            self.alpha = 0
            self.active = False

    def end(self):
        "This function ends the current scene by skipping ahead to either the start of the next scene or the start of the fadeout"
        l = getControlValue(self.length,0)-max(self.overlap, getControlValue(getControlValue(self.fadeout,0),0))
        self.started = time.time()-l
        
    def setAlpha(self,val,sd=False):
        self.rerender = True
        if val<=0:
            self.stop()
        else:
            if not self.isActive():
                self.go()
            self.manualAlpha = True
            self.alpha = val
            if sd:
                self.defaultalpha = val
        self.hasNewInfo = {}

    def setBlend(self,blend):
        blend=str(blend)[:256]
        self.blend= blend
        if blend in blendmodes:
            if self.isActive():
                self._blend = blendmodes[blend](self)
            self.blendClass = blendmodes[blend]
            self.setupBlendArgs()
        else:
            self.blendArgs  ={}
            self._blend = None
            self.blendClass = None
        self.rerender = True
        self.hasNewInfo = {}

    def setBlendArg(self,key,val):
        #serializableness check
        json.dumps(val)
        if not hasattr(self.blendClass,"parameters") or not key in self.blendClass.parameters:
            raise KeyError("No such param")

        if val is None:
            del self.blendArgs[key]
        else:
            if self.blendClass.parameters[key][1] == "number":
                val= float(val)
            self.blendArgs[key] = val
        self.rerender = True
        self.hasNewInfo = {}

        
    def clearValue(self,universe,channel):
        self.rerender = True
        try:
            del self.values[universe][channel]
            if not self.values[universe]:
                x = self.values[universe]
                del self.values[universe]
                #Put it back if there was a write from another thread. Prob
                #still not totally threadsafe
                if x:
                    self.values[universe] =x
        except:
            pass
        self.valueschanged = {}
        
    def doHandoff(self,sceneObj):
        self.rerender= True
        if self.doingHandoff:
            raise RuntimeError("Already handing off")
        sceneObj.takingOverFrom = weakref.ref(self)
        if self.takingOverFrom:
            try:
                #Don't stop the scene we are supposed to hand off to
                if not self.takingOverFrom() is sceneObj: 
                    self.freezeEffectiveState(self.takingOverFrom())
                    self.takingOverFrom().stop()
                else:
                    #If their alpha was 1, the current fade algorithm would think that it
                    #was already complete. The tiny difference is a hack to make it work
                    if sceneObj.alpha >0.999:
                        sceneObj.setAlpha(0.99)

            except Exception as e:
                print("Handoff err",e)            
        self.takingOverFrom = None
        self.doingHandoff = (time.time(), sceneObj,1-((1-self.alpha)*(1-sceneObj.alpha)))
        self.hasNewInfo = {}

    
    def render(self,t=None):
        "Calculate the current alpha value, handle stopping the scene and spawning the next one"
        if self.cue.fadein:
            fadePosition = (time.time()-self.enteredCue)/self.cue.fadein
        else:
            fadePosition = 1

        if fadePosition<1:
            self.rerender = True

        self.canvas.paint(self.cue, self.fadePosition)

        if self.cue.length and(time.time()-self.enteredCue)> self.cue.length:
            self.gotoCue(self.cue.nextCue)
            self.rerender = True


lastrendered = 0   
module.board = LightBoard()
module.boards.append(weakref.ref(module.board))

module.Scene = Scene

kaithem.lights.board = module.board
kaithem.lights.Scene = module.Scene
kaithem.lights.scenes = module.scenes
kaithem.lights.scenesByName = module.scenes_by_name
kaithem.lights.Universe = Universe
kaithem.lights.blendmodes = blendmodes
kaithem.lights.fixture = Fixture
module.controluniverse = Universe("control")

s = Scene("testingScene")
render()
---
render()
global lastrendered
if time.time() -lastrendered > 1/24.0:
    with boardsListLock:
        for i in module.boards:
            b = i()
            if b:
                b.guiPush()
            del b
    lastrendered = time.time()
        


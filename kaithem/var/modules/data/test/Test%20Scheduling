continual: true
enable: true
once: true
priority: interactive
rate-limit: 5.0
resource-type: event
trigger: 'True'
versions: {}

#End metadata. Format: metadata, setup, action, delimited by --- on it's own line.
---
from src import scheduling
import time,logging,math
class ScheduleTester():
    def __init__(self,i):
        self.last = 0
        self.interval = i
        def f():
            self._go()
        self.go =f
        self.go()
        self.id2 = id
        print("Init schedule tester obj")
        
    def _go(self):
        if self.last:
            if (abs((time.time()-self.last)-self.interval) > self.interval*1.5):
                logging.error("Scheduler testing failed, interval was "+str(self.interval)+" actual delay " (str(time.time()-self.last)))
        self.last = time.time()

    def check(self):
        if self.last:
            if (abs((time.time()-self.last)-self.interval) > self.interval*1.5):
                logging.error("Scheduler testing failed, interval was "+str(self.interval)+" actual delay " (str(time.time()-self.last)))
        return((time.time()-self.last)-self.interval)

module.scheduledEvent = ScheduleTester(5)
scheduling.scheduler.every(module.scheduledEvent.go,5)
---
#This code runs once when the event loads. It also runs when you save the event during the test compile
#and may run multiple times when kaithem boots due to dependancy resolution
__doc__=''
global func,evt
print("begin")


def f():
    module.scheduleVar = 5
func =f
module.scheduleVar =3

evt=scheduling.scheduler.every(f,1)
time.sleep(3)
if not module.scheduleVar ==5:
    raise RuntimeError("Scheduled event failed")
del f
module.scheduleVar =3
if not module.scheduleVar ==3:
    raise RuntimeError("Scheduled event did not stop when function deleted.")
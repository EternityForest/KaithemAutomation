continual: true
enable: true
once: true
priority: interactive
rate-limit: 0.0
resource-type: event
trigger: 'True'
versions: {}

#End metadata. Format: metadata, setup, action, delimited by --- on it's own line.
---
#This code runs once when the event loads. It also runs when you save the event during the test compile
#and may run multiple times when kaithem boots due to dependancy resolution
__doc__=''


import time

    
blink = kaithem.states.StateMachine(start="off")

on = blink.addState("on")
off = blink.addState("off")

blink.setTimer("on", 1, "off")

blink.setTimer("off", 1, "on")
blink.addRule("off", 'begin', "on")
blink('begin')
module['Oscillating State Machine'] = blink

---
module.sm_lamp = 0

def on():
    module.sm_lamp = 1
    
def off():
    module.sm_lamp = 0
    
sm = kaithem.states.StateMachine(start="off")

on = sm.addState("on", enter=on)
off = sm.addState("off", enter=off)

sm.setTimer("on", 1, "off")

sm.addRule('off', "motion","on")

if module.sm_lamp:
    raise RuntimeError("state machine imaginary lamp is on too soon")
sm.event("motion")
time.sleep(0.3)
if not module.sm_lamp:
    raise RuntimeError("state machine imaginary lamp is not on")
time.sleep(2)

if module.sm_lamp:
    raise RuntimeError("state machine imaginary lamp didn't turn itself off")

#Turn it on before deleting so we can make sure the timer won't trigger after it's gone
sm.event('motion')
del sm
print("success")
{
    "devices":{
        "DemoDevice": {
            "submodule":"devices.demo",
            "description" : "Just a demo device that makes pseudorandom numbers on request"
            },

        "RTL433Client": {
                "submodule":"devices.RTL433",
                "description" : "Listen to messages from rtl_433 and decode them into things like weather station data"
                },

        "ConfigurableAlarm": {
            "submodule":"devices.alarm",
            "description" : "Triggers an alarm when one of it's data points goes True, if the framework supports the alarms."
            },

        "Zigbee2MQTT":{
            "submodule":"devices.Zigbee2MQTTPlugin",
            "description": "This makes all your ZigBee devices on an MQTT server available as data points."
        },

        "YeelightRGB":{
            "submodule":"devices.Yeelight",
            "description": "Requires YeeLight python module. This device represents a bulb.  You may want to disable autosave on these bulbs to save wear with complex effects."
        },
    
        "RokuRemoteApp":{
            "submodule":"devices.RokuRemoteApp",
            "description": "Allow Roku ECP protocol remotes to discover this server and control a tag point."
        },

        "YoLinkService":{
            "submodule":"devices.YoLink",
            "description": "Access all devices on a YoLink cloud account. NOTE: YoLink has no local API yet, internet dependant.  Also note this uses the unencrypted web API"
        },

        "WeatherClient":{
            "submodule":"devices.WeatherPlugin",
            "description": "Get current weather info. No API key needed, uses wttr.in at the moment"
        },

        "ESPHomeDevice":{
            "submodule":"devices.ESPHomePlugin",
            "description": "Represents one single ESPHome device.  Cannot flash or update the ESP, use the dashboard tool for that."
        }

    }
} 

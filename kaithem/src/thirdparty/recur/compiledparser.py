#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class UnknownBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        namechars='',
        **kwargs
    ):
        super(UnknownBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class UnknownParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=UnknownBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(UnknownParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._for_statements_()
        with self._optional():
            self._syntax_error_()

    @tatsumasu()
    def _atomic_constraint_(self):  # noqa
        with self._choice():
            with self._option():
                self._timezone_()
            with self._option():
                self._intervalconstraint_()
            with self._option():
                self._nintervalconstraint_()
            with self._option():
                self._startingat_()
            with self._option():
                self._nthweekdayconstraint_()
            with self._option():
                self._weekdayconstraint_()
            with self._option():
                self._monthdayconstraint_()
            with self._option():
                self._betweentimesofdayconstraint_()
            with self._option():
                self._yeardayconstraint_()
            with self._option():
                self._timeofdayconstraint_()
            with self._option():
                self._aftertimeofdayconstraint_()
            with self._option():
                self._beforetimeconstraint_()
            with self._option():
                self._beforetimeofdayconstraint_()
            with self._option():
                self._dateconstraint_()
            with self._option():
                self._monthconstraint_()
            with self._option():
                with self._group():
                    self._token('(')
                    self._and_constraint_()
                    self._token(')')
            with self._option():
                self._except_constraint_()
            self._error('no available options')

    @tatsumasu()
    def _syntax_error_(self):  # noqa
        self._pattern('[.\\w]+')

    @tatsumasu()
    def _for_statements_(self):  # noqa
        self._for_statement_()
        self.add_last_node_to_name('and_')

        def block1():
            self._token('and')
            self._for_statement_()
            self.add_last_node_to_name('and_')
        self._closure(block1)
        self.ast._define(
            ['and_'],
            ['and_']
        )

    @tatsumasu()
    def _for_statement_(self):  # noqa
        self._and_constraint_()
        self.name_last_node('c')
        with self._optional():
            self._token('for')
            with self._group():
                self._integer_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._interval_()
                        with self._option():
                            self._intervals_()
                        self._error('no available options')
            self.name_last_node('for_')
        self.ast._define(
            ['c', 'for_'],
            []
        )

    @tatsumasu()
    def _constraint_list_(self):  # noqa

        def block0():
            self._atomic_constraint_()
        self._positive_closure(block0)

    @tatsumasu()
    def _and_constraint_(self):  # noqa
        self._constraint_list_()
        self.add_last_node_to_name('allof')

        def block1():
            with self._optional():
                self._token('and')
            self._constraint_list_()
            self.add_last_node_to_name('allof')
        self._closure(block1)
        self.ast._define(
            [],
            ['allof']
        )

    @tatsumasu()
    def _except_constraint_(self):  # noqa
        self._token('except')
        self._atomic_constraint_()

    @tatsumasu()
    def _predefinedtime_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('noon')
            with self._option():
                self._token('midnight')
            self._error('no available options')

    @tatsumasu()
    def _timeinterval_(self):  # noqa
        self._number_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('seconds')
                with self._option():
                    self._token('minutes')
                with self._option():
                    self._token('hours')
                with self._option():
                    self._token('days')
                with self._option():
                    self._token('weeks')
                self._error('no available options')

    @tatsumasu()
    def _number_(self):  # noqa
        self._pattern('\\d+[\\.]\\d+')

    @tatsumasu()
    def _integer_(self):  # noqa
        self._pattern('\\d+')

    @tatsumasu()
    def _ordinal_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('first')
            with self._option():
                self._token('second')
            with self._option():
                self._token('third')
            with self._option():
                self._token('1st')
            with self._option():
                self._token('2nd')
            with self._option():
                self._token('3rd')
            with self._option():
                self._token('other')
            with self._option():
                self._pattern('\\d\\d?th')
            self._error('no available options')

    @tatsumasu()
    def _ordinal_noother_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('first')
            with self._option():
                self._token('second')
            with self._option():
                self._token('third')
            with self._option():
                self._token('1st')
            with self._option():
                self._token('2nd')
            with self._option():
                self._token('3rd')
            with self._option():
                self._token('other')
            with self._option():
                self._pattern('\\w*\\d\\d?th')
            self._error('no available options')

    @tatsumasu()
    def _enumber_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('one')
            with self._option():
                self._token('two')
            with self._option():
                self._token('three')
            with self._option():
                self._token('four')
            with self._option():
                self._token('five')
            with self._option():
                self._token('six')
            with self._option():
                self._token('seven')
            with self._option():
                self._token('eight')
            with self._option():
                self._token('nine')
            with self._option():
                self._token('ten')
            self._error('no available options')

    @tatsumasu()
    def _time_(self):  # noqa
        with self._choice():
            with self._option():
                self._predefinedtime_()
                self.name_last_node('predefined')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            with self._group():
                                self._hour_()
                                self.name_last_node('hour')
                                with self._optional():
                                    with self._optional():
                                        with self._group():
                                            self._token(':')
                                            self._minute_()
                                            self.name_last_node('minute')
                                        with self._optional():
                                            with self._group():
                                                self._token(':')
                                                self._second_()
                                                self.name_last_node('second')
                                            with self._optional():
                                                with self._group():
                                                    self._token(':')
                                                    self._millisecond_()
                                                    self.name_last_node('ms')
                                with self._group():
                                    with self._choice():
                                        with self._option():
                                            self._token('am')
                                        with self._option():
                                            self._token('pm')
                                        with self._option():
                                            self._token('AM')
                                        with self._option():
                                            self._token('PM')
                                        self._error('no available options')
                                self.name_last_node('ampm')
                        with self._option():
                            with self._group():
                                self._hour_()
                                self.name_last_node('hour')
                                self._token(':')
                                self._minute_()
                                self.name_last_node('minute')
                                with self._optional():
                                    with self._optional():
                                        with self._group():
                                            self._token(':')
                                            self._second_()
                                            self.name_last_node('second')
                                        with self._optional():
                                            with self._group():
                                                self._token(':')
                                                self._millisecond_()
                                                self.name_last_node('ms')
                        self._error('no available options')
            self._error('no available options')
        self.ast._define(
            ['ampm', 'hour', 'minute', 'ms', 'predefined', 'second'],
            []
        )

    @tatsumasu()
    def _times_(self):  # noqa

        def block0():
            self._time_()
            self.add_last_node_to_name('times')
            with self._optional():
                self._token(',')
            with self._optional():
                self._token('and')
        self._positive_closure(block0)
        self.ast._define(
            [],
            ['times']
        )

    @tatsumasu()
    def _hour_(self):  # noqa
        self._pattern('\\d\\d?')

    @tatsumasu()
    def _minute_(self):  # noqa
        self._pattern('\\d\\d')

    @tatsumasu()
    def _second_(self):  # noqa
        self._pattern('\\d\\d')

    @tatsumasu()
    def _millisecond_(self):  # noqa
        self._pattern('\\d\\d\\d\\d')

    @tatsumasu()
    def _year_(self):  # noqa
        self._pattern('\\d\\d\\d\\d\\d*')

    @tatsumasu()
    def _month_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('jan')
            with self._option():
                self._token('january')
            with self._option():
                self._token('feb')
            with self._option():
                self._token('february')
            with self._option():
                self._token('mar')
            with self._option():
                self._token('march')
            with self._option():
                self._token('apr')
            with self._option():
                self._token('april')
            with self._option():
                self._token('may')
            with self._option():
                self._token('jun')
            with self._option():
                self._token('june')
            with self._option():
                self._token('jul')
            with self._option():
                self._token('july')
            with self._option():
                self._token('aug')
            with self._option():
                self._token('august')
            with self._option():
                self._token('sep')
            with self._option():
                self._token('september')
            with self._option():
                self._token('nov')
            with self._option():
                self._token('november')
            with self._option():
                self._token('dec')
            with self._option():
                self._token('december')
            with self._option():
                self._token('Jan')
            with self._option():
                self._token('January')
            with self._option():
                self._token('Feb')
            with self._option():
                self._token('February')
            with self._option():
                self._token('Mar')
            with self._option():
                self._token('March')
            with self._option():
                self._token('Apr')
            with self._option():
                self._token('April')
            with self._option():
                self._token('May')
            with self._option():
                self._token('Jun')
            with self._option():
                self._token('June')
            with self._option():
                self._token('Jul')
            with self._option():
                self._token('July')
            with self._option():
                self._token('Aug')
            with self._option():
                self._token('August')
            with self._option():
                self._token('Sep')
            with self._option():
                self._token('September')
            with self._option():
                self._token('Nov')
            with self._option():
                self._token('November')
            with self._option():
                self._token('Dec')
            with self._option():
                self._token('December')
            self._error('no available options')

    @tatsumasu()
    def _dayofmonth_(self):  # noqa
        with self._choice():
            with self._option():
                self._ordinal_noother_()
            with self._option():
                self._pattern('\\d\\d?')
            self._error('no available options')

    @tatsumasu()
    def _date_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._month_()
                    self.name_last_node('month')
                    self._dayofmonth_()
                    self.name_last_node('dayofmonth')
            with self._option():
                with self._group():
                    self._dayofmonth_()
                    self.name_last_node('dayofmonth')
                    self._month_()
                    self.name_last_node('month')
            with self._option():
                with self._group():
                    self._token('the')
                    self._dayofmonth_()
                    self.name_last_node('dayofmonth')
                    self._token('of')
                    self._month_()
                    self.name_last_node('month')
            self._error('no available options')
        self.ast._define(
            ['dayofmonth', 'month'],
            []
        )

    @tatsumasu()
    def _dates_(self):  # noqa

        def block0():
            self._date_()
            self.add_last_node_to_name('@')
            with self._optional():
                with self._choice():
                    with self._option():
                        self._token(',')
                    with self._option():
                        self._token('and')
                    with self._option():
                        self._pattern(', +and')
                    self._error('no available options')
        self._positive_closure(block0)

    @tatsumasu()
    def _datewithyear_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._month_()
                    self.name_last_node('month')
                    self._dayofmonth_()
                    self.name_last_node('dayofmonth')
                    self._year_()
                    self.name_last_node('year')
            with self._option():
                with self._group():
                    self._dayofmonth_()
                    self.name_last_node('dayofmonth')
                    self._month_()
                    self.name_last_node('month')
                    self._year_()
                    self.name_last_node('year')
            self._error('no available options')
        self.ast._define(
            ['dayofmonth', 'month', 'year'],
            []
        )

    @tatsumasu()
    def _datetime_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._time_()
                    self.name_last_node('time')
                    self._date_()
                    self.name_last_node('date')
            with self._option():
                with self._group():
                    self._time_()
                    self.name_last_node('time')
                    self._token('on')
                    self._date_()
                    self.name_last_node('date')
            with self._option():
                with self._group():
                    self._date_()
                    self.name_last_node('date')
                    self._token('at')
                    self._time_()
                    self.name_last_node('time')
            self._error('no available options')
        self.ast._define(
            ['date', 'time'],
            []
        )

    @tatsumasu()
    def _datetimewithyear_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._time_()
                    self.name_last_node('time')
                    self._datewithyear_()
                    self.name_last_node('date')
            with self._option():
                with self._group():
                    self._time_()
                    self.name_last_node('time')
                    self._token('on')
                    self._datewithyear_()
                    self.name_last_node('date')
            with self._option():
                with self._group():
                    self._datewithyear_()
                    self.name_last_node('date')
                    self._token('at')
                    self._time_()
                    self.name_last_node('time')
            with self._option():
                self._datewithyear_()
                self.name_last_node('date')
            self._error('no available options')
        self.ast._define(
            ['date', 'time'],
            []
        )

    @tatsumasu()
    def _timeofdayrange_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('between')
                    self._time_()
                    self._token('and')
                    self._time_()
            with self._option():
                with self._group():
                    self._token('from')
                    self._time_()
                    self._token('to')
                    self._time_()
            with self._option():
                with self._group():
                    self._time_()
                    self._token('to')
                    self._time_()
            self._error('no available options')

    @tatsumasu()
    def _interval_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('week')
            with self._option():
                self._token('month')
            with self._option():
                self._token('year')
            with self._option():
                self._token('day')
            with self._option():
                self._token('hour')
            with self._option():
                self._token('minute')
            with self._option():
                self._token('second')
            with self._option():
                self._token('ms')
            with self._option():
                self._token('millisecond')
            self._error('no available options')

    @tatsumasu()
    def _intervals_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('weeks')
            with self._option():
                self._token('months')
            with self._option():
                self._token('years')
            with self._option():
                self._token('days')
            with self._option():
                self._token('hours')
            with self._option():
                self._token('minutes')
            with self._option():
                self._token('seconds')
            with self._option():
                self._token('ms')
            with self._option():
                self._token('milliseconds')
            self._error('no available options')

    @tatsumasu()
    def _weekday_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('mon')
            with self._option():
                self._token('monday')
            with self._option():
                self._token('tue')
            with self._option():
                self._token('tuesday')
            with self._option():
                self._token('wed')
            with self._option():
                self._token('wednesday')
            with self._option():
                self._token('thu')
            with self._option():
                self._token('thursday')
            with self._option():
                self._token('fri')
            with self._option():
                self._token('friday')
            with self._option():
                self._token('sat')
            with self._option():
                self._token('saturday')
            with self._option():
                self._token('sun')
            with self._option():
                self._token('sunday')
            self._error('no available options')

    @tatsumasu()
    def _timezone_(self):  # noqa
        self._pattern('[A-z0-9]+\\/[A-z0-9]+')

    @tatsumasu()
    def _timeofdayconstraint_(self):  # noqa
        with self._optional():
            self._token('at')
        self._times_()
        self.name_last_node('timeofdayconstraint')
        self.ast._define(
            ['timeofdayconstraint'],
            []
        )

    @tatsumasu()
    def _aftertimeofdayconstraint_(self):  # noqa
        self._token('after')
        self._time_()
        self.name_last_node('aftertimeofdayconstraint')
        self.ast._define(
            ['aftertimeofdayconstraint'],
            []
        )

    @tatsumasu()
    def _beforetimeofdayconstraint_(self):  # noqa
        self._token('before')
        self._time_()
        self.name_last_node('beforetimeofdayconstraint')
        self.ast._define(
            ['beforetimeofdayconstraint'],
            []
        )

    @tatsumasu()
    def _beforetimeconstraint_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('before')
                with self._option():
                    self._token('until')
                self._error('no available options')
        self._datetimewithyear_()
        self.name_last_node('before')
        self.ast._define(
            ['before'],
            []
        )

    @tatsumasu()
    def _betweentimesofdayconstraint_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('between')
                    self._time_()
                    self.add_last_node_to_name('@')
                    self._token('and')
                    self._time_()
                    self.add_last_node_to_name('@')
            with self._option():
                with self._group():
                    self._token('from')
                    self._time_()
                    self.add_last_node_to_name('@')
                    self._token('to')
                    self._time_()
                    self.add_last_node_to_name('@')
            self._error('no available options')

    @tatsumasu()
    def _nintervalconstraint_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('every')
                    self._integer_()
                    self._intervals_()
            with self._option():
                with self._group():
                    self._token('every')
                    self._ordinal_()
                    self._interval_()
            with self._option():
                with self._group():
                    self._token('every')
                    self._enumber_()
                    self._intervals_()
            self._error('no available options')

    @tatsumasu()
    def _intervalconstraint_(self):  # noqa
        with self._group():
            self._token('every')
            self._interval_()

    @tatsumasu()
    def _dateconstraint_(self):  # noqa
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('on')
                with self._option():
                    self._token('every year on')
                self._error('no available options')
        self._date_()

    @tatsumasu()
    def _datewithyearconstraint_(self):  # noqa
        with self._group():
            with self._optional():
                self._token('on')
            self._datewithyear_()

    @tatsumasu()
    def _yeardayconstraint_(self):  # noqa
        self._token('on the ')
        self._ordinal_()
        self._token('day of the year')

    @tatsumasu()
    def _monthdayconstraint_(self):  # noqa
        self._token('on the')
        self._ordinal_()
        self.add_last_node_to_name('@')

        def block1():
            with self._optional():
                self._token(',')
            self._ordinal_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        with self._optional():
            with self._optional():
                self._token(',')
            self._token('and')
            self._ordinal_()
            self.add_last_node_to_name('@')
        with self._optional():
            with self._optional():
                self._token('day')
            self._token('of the month')

    @tatsumasu()
    def _weekdayconstraint_(self):  # noqa
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('every')
                with self._option():
                    self._token('on')
                self._error('no available options')
        self._weekday_()
        self.add_last_node_to_name('@')

        def block2():
            with self._optional():
                self._token(',')
            self._weekday_()
            self.add_last_node_to_name('@')
        self._closure(block2)
        with self._optional():
            with self._optional():
                self._token(',')
            self._token('and')
            self._weekday_()
            self.add_last_node_to_name('@')

    @tatsumasu()
    def _nthweekdayconstraint_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('the')
                with self._option():
                    self._token('on the')
                with self._option():
                    self._token('every')
                self._error('no available options')
        self._ordinal_()
        self.add_last_node_to_name('@')
        self._weekday_()
        self.add_last_node_to_name('@')
        self._token('of the month')

    @tatsumasu()
    def _monthconstraint_(self):  # noqa
        with self._optional():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('during')
                    with self._option():
                        self._token('in')
                    with self._option():
                        self._token('in the month of')
                    with self._option():
                        self._token('in the months of')
                    self._error('no available options')
        self._month_()
        self.add_last_node_to_name('@')

        def block2():
            with self._optional():
                self._token(',')
            self._month_()
            self.add_last_node_to_name('@')
        self._closure(block2)
        with self._optional():
            with self._optional():
                self._token(',')
            self._token('and')
            self._month_()
            self.add_last_node_to_name('@')

    @tatsumasu()
    def _startingat_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('starting')
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._token('at')
                            with self._option():
                                self._token('on')
                            self._error('no available options')
                    self._datetimewithyear_()
                    self.name_last_node('@')
            with self._option():
                self._token('starting on')
                self._weekday_()
                self.name_last_node('weekday')
            self._error('no available options')
        self.ast._define(
            ['weekday'],
            []
        )


class UnknownSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def atomic_constraint(self, ast):  # noqa
        return ast

    def syntax_error(self, ast):  # noqa
        return ast

    def for_statements(self, ast):  # noqa
        return ast

    def for_statement(self, ast):  # noqa
        return ast

    def constraint_list(self, ast):  # noqa
        return ast

    def and_constraint(self, ast):  # noqa
        return ast

    def except_constraint(self, ast):  # noqa
        return ast

    def predefinedtime(self, ast):  # noqa
        return ast

    def timeinterval(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def ordinal(self, ast):  # noqa
        return ast

    def ordinal_noother(self, ast):  # noqa
        return ast

    def enumber(self, ast):  # noqa
        return ast

    def time(self, ast):  # noqa
        return ast

    def times(self, ast):  # noqa
        return ast

    def hour(self, ast):  # noqa
        return ast

    def minute(self, ast):  # noqa
        return ast

    def second(self, ast):  # noqa
        return ast

    def millisecond(self, ast):  # noqa
        return ast

    def year(self, ast):  # noqa
        return ast

    def month(self, ast):  # noqa
        return ast

    def dayofmonth(self, ast):  # noqa
        return ast

    def date(self, ast):  # noqa
        return ast

    def dates(self, ast):  # noqa
        return ast

    def datewithyear(self, ast):  # noqa
        return ast

    def datetime(self, ast):  # noqa
        return ast

    def datetimewithyear(self, ast):  # noqa
        return ast

    def timeofdayrange(self, ast):  # noqa
        return ast

    def interval(self, ast):  # noqa
        return ast

    def intervals(self, ast):  # noqa
        return ast

    def weekday(self, ast):  # noqa
        return ast

    def timezone(self, ast):  # noqa
        return ast

    def timeofdayconstraint(self, ast):  # noqa
        return ast

    def aftertimeofdayconstraint(self, ast):  # noqa
        return ast

    def beforetimeofdayconstraint(self, ast):  # noqa
        return ast

    def beforetimeconstraint(self, ast):  # noqa
        return ast

    def betweentimesofdayconstraint(self, ast):  # noqa
        return ast

    def nintervalconstraint(self, ast):  # noqa
        return ast

    def intervalconstraint(self, ast):  # noqa
        return ast

    def dateconstraint(self, ast):  # noqa
        return ast

    def datewithyearconstraint(self, ast):  # noqa
        return ast

    def yeardayconstraint(self, ast):  # noqa
        return ast

    def monthdayconstraint(self, ast):  # noqa
        return ast

    def weekdayconstraint(self, ast):  # noqa
        return ast

    def nthweekdayconstraint(self, ast):  # noqa
        return ast

    def monthconstraint(self, ast):  # noqa
        return ast

    def startingat(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = UnknownParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, UnknownParser, name='Unknown')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

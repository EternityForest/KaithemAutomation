/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/convert@5.2.0/dist/index.mjs
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 *
 *
 */

/* @copyright

MIT License

Copyright (c) 2020 Jonah Snider

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
const e = [[[["deg", 1]], [["mm2", 1], ["cm2", 100], ["m2", 1e6], ["km2", 1e12]], [["bits", 1], ["B", 8], ["KB", 8e3], ["MB", 8e6], ["GB", 8e9], ["TB", 8e12], ["PB", 8e15]], [["J", 1]], [["N", 1]], [["mm", 1], ["cm", 10], ["m", 1e3], ["km", 1e6]], [["mg", 1], ["g", 1e3], ["kg", 1e6]], [["W", 1], ["kW", 1e3], ["MW", 1e6], ["GW", 1e9], ["TW", 1e12], ["PW", 1e15]], [["Pa", 1]], [["C", 1]], [["fs", 1], ["ps", 1e3], ["ns", 1e6], ["µs", 1e9], ["ms", 1e12], ["s", 1e15], ["min", 6e16], ["h", 36e17], ["d", 864e17], ["y", 31536e18]], [["mL", 1], ["L", 1e3]]], [[["deg", 1]], [["sq in", 1], ["sq ft", 144], ["sq mi", 4014489600], ["ac", 6272640]], [["bits", 1], ["B", 8], ["KiB", 8192], ["MiB", 8388608], ["GiB", 8589934592], ["TiB", 8796093022208], ["PiB", 9007199254740992]], [["J", 1]], [["lbf", 1]], [["in", 1], ["ft", 12], ["yd", 36], ["mi", 63360]], [["oz", 1], ["lb", 16]], [["W", 1], ["kW", 1e3], ["MW", 1e6], ["GW", 1e9], ["TW", 1e12], ["PW", 1e15]], [["psi", 1]], [["F", 1]], [["fs", 1], ["ps", 1e3], ["ns", 1e6], ["µs", 1e9], ["ms", 1e12], ["s", 1e15], ["min", 6e16], ["h", 36e17], ["d", 864e17], ["y", 31536e18]], [["tsp", 1], ["tbsp", 3], ["fl oz", 6], ["cup", 48], ["pt", 96], ["qt", 192], ["gal", 768]]]], t = { radian: [0, 1], radians: [0, 1], rad: [0, 1], rads: [0, 1], r: [0, 1], turn: [0, 2 * Math.PI], turns: [0, 2 * Math.PI], degree: [0, Math.PI / 180], degrees: [0, Math.PI / 180], deg: [0, Math.PI / 180], degs: [0, Math.PI / 180], "°": [0, Math.PI / 180], gradian: [0, Math.PI / 200], gradians: [0, Math.PI / 200], gon: [0, Math.PI / 200], gons: [0, Math.PI / 200], grad: [0, Math.PI / 200], grads: [0, Math.PI / 200], grade: [0, Math.PI / 200], grades: [0, Math.PI / 200], "square meter": [1, 1], "square meters": [1, 1], "square metre": [1, 1], "square metres": [1, 1], "m²": [1, 1], m2: [1, 1], "square petameter": [1, 1e30], "square petametre": [1, 1e30], "square petameters": [1, 1e30], "square petametres": [1, 1e30], "Pm²": [1, 1e30], Pm2: [1, 1e30], "square terameter": [1, 1e24], "square terametre": [1, 1e24], "square terameters": [1, 1e24], "square terametres": [1, 1e24], "Tm²": [1, 1e24], Tm2: [1, 1e24], "square gigameter": [1, 1e18], "square gigametre": [1, 1e18], "square gigameters": [1, 1e18], "square gigametres": [1, 1e18], "Gm²": [1, 1e18], Gm2: [1, 1e18], "square megameter": [1, 1e12], "square megametre": [1, 1e12], "square megameters": [1, 1e12], "square megametres": [1, 1e12], "Mm²": [1, 1e12], Mm2: [1, 1e12], "square kilometer": [1, 1e6], "square kilometre": [1, 1e6], "square kilometers": [1, 1e6], "square kilometres": [1, 1e6], "km²": [1, 1e6], km2: [1, 1e6], "square hectometer": [1, 1e4], "square hectometre": [1, 1e4], "square hectometers": [1, 1e4], "square hectometres": [1, 1e4], "hm²": [1, 1e4], hm2: [1, 1e4], "square decameter": [1, 100], "square decametre": [1, 100], "square decameters": [1, 100], "square decametres": [1, 100], "dam²": [1, 100], dam2: [1, 100], "square decimeter": [1, .1], "square decimetre": [1, .1], "square decimeters": [1, .1], "square decimetres": [1, .1], "dm²": [1, .1], dm2: [1, .1], "square centimeter": [1, 1e-4], "square centimetre": [1, 1e-4], "square centimeters": [1, 1e-4], "square centimetres": [1, 1e-4], "cm²": [1, 1e-4], cm2: [1, 1e-4], "square millimeter": [1, 1e-6], "square millimetre": [1, 1e-6], "square millimeters": [1, 1e-6], "square millimetres": [1, 1e-6], "mm²": [1, 1e-6], mm2: [1, 1e-6], "square micrometer": [1, 1e-12], "square micrometre": [1, 1e-12], "square micrometers": [1, 1e-12], "square micrometres": [1, 1e-12], "μm²": [1, 1e-12], "µm²": [1, 1e-12], "μm2": [1, 1e-12], "µm2": [1, 1e-12], "square nanometer": [1, 1e-18], "square nanometre": [1, 1e-18], "square nanometers": [1, 1e-18], "square nanometres": [1, 1e-18], "nm²": [1, 1e-18], nm2: [1, 1e-18], "square picometer": [1, 1e-24], "square picometre": [1, 1e-24], "square picometers": [1, 1e-24], "square picometres": [1, 1e-24], "pm²": [1, 1e-24], pm2: [1, 1e-24], "square femtometer": [1, 1e-30], "square femtometre": [1, 1e-30], "square femtometers": [1, 1e-30], "square femtometres": [1, 1e-30], "fm²": [1, 1e-30], fm2: [1, 1e-30], acre: [1, 4046.8564224], acres: [1, 4046.8564224], ac: [1, 4046.8564224], centiare: [1, 1], centiares: [1, 1], ca: [1, 1], deciare: [1, 10], deciares: [1, 10], da: [1, 10], are: [1, 100], ares: [1, 100], decare: [1, 1e3], decares: [1, 1e3], daa: [1, 1e3], hectare: [1, 1e4], hectares: [1, 1e4], ha: [1, 1e4], "square foot": [1, .09290304], "square feet": [1, .09290304], "sq ft": [1, .09290304], "ft²": [1, .09290304], ft2: [1, .09290304], "square inch": [1, 64516e-8], "square inches": [1, 64516e-8], "sq in": [1, 64516e-8], "in²": [1, 64516e-8], in2: [1, 64516e-8], "square yard": [1, .83612736], "square yards": [1, .83612736], "sq yd": [1, .83612736], "yd²": [1, .83612736], yd2: [1, .83612736], "square mile": [1, 2589988.110336], "square miles": [1, 2589988.110336], "sq mi": [1, 2589988.110336], "mi²": [1, 2589988.110336], mi2: [1, 2589988.110336], bit: [2, 1], bits: [2, 1], b: [2, 1], pebibit: [2, 0x4000000000000], pebibits: [2, 0x4000000000000], Pib: [2, 0x4000000000000], tebibit: [2, 1099511627776], tebibits: [2, 1099511627776], Tib: [2, 1099511627776], gibibit: [2, 1073741824], gibibits: [2, 1073741824], Gib: [2, 1073741824], mebibit: [2, 1048576], mebibits: [2, 1048576], Mib: [2, 1048576], kibibit: [2, 1024], kibibits: [2, 1024], Kib: [2, 1024], Kb: [2, 1e3], KB: [2, 8e3], petabit: [2, 1e15], petabits: [2, 1e15], Pb: [2, 1e15], terabit: [2, 1e12], terabits: [2, 1e12], Tb: [2, 1e12], gigabit: [2, 1e9], gigabits: [2, 1e9], Gb: [2, 1e9], megabit: [2, 1e6], megabits: [2, 1e6], Mb: [2, 1e6], kilobit: [2, 1e3], kilobits: [2, 1e3], kb: [2, 1e3], hectobit: [2, 100], hectobits: [2, 100], hb: [2, 100], decabit: [2, 10], decabits: [2, 10], dab: [2, 10], decibit: [2, .1], decibits: [2, .1], db: [2, .1], centibit: [2, .01], centibits: [2, .01], cb: [2, .01], millibit: [2, .001], millibits: [2, .001], mb: [2, .001], microbit: [2, 1e-6], microbits: [2, 1e-6], "μb": [2, 1e-6], "µb": [2, 1e-6], nanobit: [2, 1e-9], nanobits: [2, 1e-9], nb: [2, 1e-9], picobit: [2, 1e-12], picobits: [2, 1e-12], pb: [2, 1e-12], femtobit: [2, 1e-15], femtobits: [2, 1e-15], fb: [2, 1e-15], nibble: [2, 4], nibbles: [2, 4], semioctet: [2, 4], semioctets: [2, 4], halfbyte: [2, 4], halfbytes: [2, 4], byte: [2, 8], bytes: [2, 8], octect: [2, 8], octects: [2, 8], B: [2, 8], pebibyte: [2, 9007199254740992], pebibytes: [2, 9007199254740992], PiB: [2, 9007199254740992], tebibyte: [2, 8796093022208], tebibytes: [2, 8796093022208], TiB: [2, 8796093022208], gibibyte: [2, 8589934592], gibibytes: [2, 8589934592], GiB: [2, 8589934592], mebibyte: [2, 8388608], mebibytes: [2, 8388608], MiB: [2, 8388608], kibibyte: [2, 8192], kibibytes: [2, 8192], KiB: [2, 8192], petabyte: [2, 8e15], petabytes: [2, 8e15], PB: [2, 8e15], terabyte: [2, 8e12], terabytes: [2, 8e12], TB: [2, 8e12], gigabyte: [2, 8e9], gigabytes: [2, 8e9], GB: [2, 8e9], megabyte: [2, 8e6], megabytes: [2, 8e6], MB: [2, 8e6], kilobyte: [2, 8e3], kilobytes: [2, 8e3], kB: [2, 8e3], hectobyte: [2, 800], hectobytes: [2, 800], hB: [2, 800], decabyte: [2, 80], decabytes: [2, 80], daB: [2, 80], decibyte: [2, .8], decibytes: [2, .8], dB: [2, .8], centibyte: [2, .08], centibytes: [2, .08], cB: [2, .08], millibyte: [2, .008], millibytes: [2, .008], mB: [2, .008], microbyte: [2, 8e-6], microbytes: [2, 8e-6], "μB": [2, 8e-6], "µB": [2, 8e-6], nanobyte: [2, 8e-9], nanobytes: [2, 8e-9], nB: [2, 8e-9], picobyte: [2, 8e-12], picobytes: [2, 8e-12], pB: [2, 8e-12], femtobyte: [2, 8e-15], femtobytes: [2, 8e-15], fB: [2, 8e-15], hextet: [2, 16], hextets: [2, 16], joule: [3, 1], joules: [3, 1], J: [3, 1], petajoule: [3, 1e15], petajoules: [3, 1e15], PJ: [3, 1e15], terajoule: [3, 1e12], terajoules: [3, 1e12], TJ: [3, 1e12], gigajoule: [3, 1e9], gigajoules: [3, 1e9], GJ: [3, 1e9], megajoule: [3, 1e6], megajoules: [3, 1e6], MJ: [3, 1e6], kilojoule: [3, 1e3], kilojoules: [3, 1e3], kJ: [3, 1e3], hectojoule: [3, 100], hectojoules: [3, 100], hJ: [3, 100], decajoule: [3, 10], decajoules: [3, 10], daJ: [3, 10], decijoule: [3, .1], decijoules: [3, .1], dJ: [3, .1], centijoule: [3, .01], centijoules: [3, .01], cJ: [3, .01], millijoule: [3, .001], millijoules: [3, .001], mJ: [3, .001], microjoule: [3, 1e-6], microjoules: [3, 1e-6], "μJ": [3, 1e-6], "µJ": [3, 1e-6], nanojoule: [3, 1e-9], nanojoules: [3, 1e-9], nJ: [3, 1e-9], picojoule: [3, 1e-12], picojoules: [3, 1e-12], pJ: [3, 1e-12], femtojoule: [3, 1e-15], femtojoules: [3, 1e-15], fJ: [3, 1e-15], "watt-hour": [3, 3600], "W⋅h": [3, 3600], "W h": [3, 3600], Wh: [3, 3600], "petawatt-hour": [3, 36e17], "petawatt-hours": [3, 36e17], "PW⋅h": [3, 36e17], "PW h": [3, 36e17], PWh: [3, 36e17], "terawatt-hour": [3, 36e14], "terawatt-hours": [3, 36e14], "TW⋅h": [3, 36e14], "TW h": [3, 36e14], TWh: [3, 36e14], "gigawatt-hour": [3, 36e11], "gigawatt-hours": [3, 36e11], "GW⋅h": [3, 36e11], "GW h": [3, 36e11], GWh: [3, 36e11], "megawatt-hour": [3, 36e8], "megawatt-hours": [3, 36e8], "MW⋅h": [3, 36e8], "MW h": [3, 36e8], MWh: [3, 36e8], "kilowatt-hour": [3, 36e5], "kilowatt-hours": [3, 36e5], "kW⋅h": [3, 36e5], "kW h": [3, 36e5], kWh: [3, 36e5], "hectowatt-hour": [3, 36e4], "hectowatt-hours": [3, 36e4], "hW⋅h": [3, 36e4], "hW h": [3, 36e4], hWh: [3, 36e4], "decawatt-hour": [3, 36e3], "decawatt-hours": [3, 36e3], "daW⋅h": [3, 36e3], "daW h": [3, 36e3], daWh: [3, 36e3], "deciwatt-hour": [3, 360], "deciwatt-hours": [3, 360], "dW⋅h": [3, 360], "dW h": [3, 360], dWh: [3, 360], "centiwatt-hour": [3, 36], "centiwatt-hours": [3, 36], "cW⋅h": [3, 36], "cW h": [3, 36], cWh: [3, 36], "milliwatt-hour": [3, 3.6], "milliwatt-hours": [3, 3.6], "mW⋅h": [3, 3.6], "mW h": [3, 3.6], mWh: [3, 3.6], "microwatt-hour": [3, .0036], "microwatt-hours": [3, .0036], "μW⋅h": [3, .0036], "µW⋅h": [3, .0036], "μW h": [3, .0036], "µW h": [3, .0036], "μWh": [3, .0036], "µWh": [3, .0036], "nanowatt-hour": [3, 36e-7], "nanowatt-hours": [3, 36e-7], "nW⋅h": [3, 36e-7], "nW h": [3, 36e-7], nWh: [3, 36e-7], "picowatt-hour": [3, 3.6e-9], "picowatt-hours": [3, 3.6e-9], "pW⋅h": [3, 3.6e-9], "pW h": [3, 3.6e-9], pWh: [3, 3.6e-9], "femtowatt-hour": [3, 36e-13], "femtowatt-hours": [3, 36e-13], "fW⋅h": [3, 36e-13], "fW h": [3, 36e-13], fWh: [3, 36e-13], newton: [4, 1], newtons: [4, 1], N: [4, 1], petanewton: [4, 1e15], petanewtons: [4, 1e15], PN: [4, 1e15], teranewton: [4, 1e12], teranewtons: [4, 1e12], TN: [4, 1e12], giganewton: [4, 1e9], giganewtons: [4, 1e9], GN: [4, 1e9], meganewton: [4, 1e6], meganewtons: [4, 1e6], MN: [4, 1e6], kilonewton: [4, 1e3], kilonewtons: [4, 1e3], kN: [4, 1e3], hectonewton: [4, 100], hectonewtons: [4, 100], hN: [4, 100], decanewton: [4, 10], decanewtons: [4, 10], daN: [4, 10], decinewton: [4, .1], decinewtons: [4, .1], dN: [4, .1], centinewton: [4, .01], centinewtons: [4, .01], cN: [4, .01], millinewton: [4, .001], millinewtons: [4, .001], mN: [4, .001], micronewton: [4, 1e-6], micronewtons: [4, 1e-6], "μN": [4, 1e-6], "µN": [4, 1e-6], nanonewton: [4, 1e-9], nanonewtons: [4, 1e-9], nN: [4, 1e-9], piconewton: [4, 1e-12], piconewtons: [4, 1e-12], pN: [4, 1e-12], femtonewton: [4, 1e-15], femtonewtons: [4, 1e-15], fN: [4, 1e-15], dyne: [4, 1e-5], dynes: [4, 1e-5], dyn: [4, 1e-5], "pound of force": [4, 4.448222], "pound-force": [4, 4.448222], lbf: [4, 4.448222], kip: [4, 4448.2216], klb: [4, 4448.2216], kipf: [4, 4448.2216], klbf: [4, 4448.2216], poundal: [4, .138255], poundals: [4, .138255], pdl: [4, .138255], "kilogram-force": [4, 9.80665], kilopond: [4, 9.80665], kiloponds: [4, 9.80665], kgf: [4, 9.80665], kp: [4, 9.80665], "tonne-force": [4, 9806.65], "metric ton-force": [4, 9806.65], "megagram-force": [4, 9806.65], megapond: [4, 9806.65], tf: [4, 9806.65], Mp: [4, 9806.65], meter: [5, 1], meters: [5, 1], metre: [5, 1], metres: [5, 1], m: [5, 1], petameter: [5, 1e15], petametre: [5, 1e15], petameters: [5, 1e15], petametres: [5, 1e15], Pm: [5, 1e15], terameter: [5, 1e12], terametre: [5, 1e12], terameters: [5, 1e12], terametres: [5, 1e12], Tm: [5, 1e12], gigameter: [5, 1e9], gigametre: [5, 1e9], gigameters: [5, 1e9], gigametres: [5, 1e9], Gm: [5, 1e9], megameter: [5, 1e6], megametre: [5, 1e6], megameters: [5, 1e6], megametres: [5, 1e6], Mm: [5, 1e6], kilometer: [5, 1e3], kilometre: [5, 1e3], kilometers: [5, 1e3], kilometres: [5, 1e3], km: [5, 1e3], hectometer: [5, 100], hectometre: [5, 100], hectometers: [5, 100], hectometres: [5, 100], hm: [5, 100], decameter: [5, 10], decametre: [5, 10], decameters: [5, 10], decametres: [5, 10], dam: [5, 10], decimeter: [5, .1], decimetre: [5, .1], decimeters: [5, .1], decimetres: [5, .1], dm: [5, .1], centimeter: [5, .01], centimetre: [5, .01], centimeters: [5, .01], centimetres: [5, .01], cm: [5, .01], millimeter: [5, .001], millimetre: [5, .001], millimeters: [5, .001], millimetres: [5, .001], mm: [5, .001], micrometer: [5, 1e-6], micrometre: [5, 1e-6], micrometers: [5, 1e-6], micrometres: [5, 1e-6], "μm": [5, 1e-6], "µm": [5, 1e-6], nanometer: [5, 1e-9], nanometre: [5, 1e-9], nanometers: [5, 1e-9], nanometres: [5, 1e-9], nm: [5, 1e-9], picometer: [5, 1e-12], picometre: [5, 1e-12], picometers: [5, 1e-12], picometres: [5, 1e-12], pm: [5, 1e-12], femtometer: [5, 1e-15], femtometre: [5, 1e-15], femtometers: [5, 1e-15], femtometres: [5, 1e-15], fm: [5, 1e-15], foot: [5, .3048], feet: [5, .3048], ft: [5, .3048], "'": [5, .3048], "US survey foot": [5, .3048006096012192], "US survey feet": [5, .3048006096012192], "U.S. survey foot": [5, .3048006096012192], "U.S. survey feet": [5, .3048006096012192], inch: [5, .0254], inches: [5, .0254], in: [5, .0254], '"': [5, .0254], yard: [5, .9144], yards: [5, .9144], yd: [5, .9144], mile: [5, 1609.344], miles: [5, 1609.344], mi: [5, 1609.344], "nautical mile": [5, 1852], "nautical miles": [5, 1852], M: [5, 1852], NM: [5, 1852], nmi: [5, 1852], "light-year": [5, 9460730472580800], "light-years": [5, 9460730472580800], ly: [5, 9460730472580800], pica: [5, .0042333], picas: [5, .0042333], pc: [5, .0042333], point: [5, 3528e-7], points: [5, 3528e-7], gram: [6, 1], grams: [6, 1], g: [6, 1], petagram: [6, 1e15], petagrams: [6, 1e15], Pg: [6, 1e15], teragram: [6, 1e12], teragrams: [6, 1e12], Tg: [6, 1e12], gigagram: [6, 1e9], gigagrams: [6, 1e9], Gg: [6, 1e9], megagram: [6, 1e6], megagrams: [6, 1e6], Mg: [6, 1e6], kilogram: [6, 1e3], kilograms: [6, 1e3], kg: [6, 1e3], hectogram: [6, 100], hectograms: [6, 100], hg: [6, 100], decagram: [6, 10], decagrams: [6, 10], dag: [6, 10], decigram: [6, .1], decigrams: [6, .1], dg: [6, .1], centigram: [6, .01], centigrams: [6, .01], cg: [6, .01], milligram: [6, .001], milligrams: [6, .001], mg: [6, .001], microgram: [6, 1e-6], micrograms: [6, 1e-6], "μg": [6, 1e-6], "µg": [6, 1e-6], nanogram: [6, 1e-9], nanograms: [6, 1e-9], ng: [6, 1e-9], picogram: [6, 1e-12], picograms: [6, 1e-12], pg: [6, 1e-12], femtogram: [6, 1e-15], femtograms: [6, 1e-15], fg: [6, 1e-15], tonne: [6, 1e6], tonnes: [6, 1e6], "metric ton": [6, 1e6], "metric tons": [6, 1e6], t: [6, 1e6], kilotonne: [6, 1e9], kilotonnes: [6, 1e9], kt: [6, 1e9], megatonne: [6, 1e12], megatonnes: [6, 1e12], Mt: [6, 1e12], gigatonne: [6, 1e15], gigatonnes: [6, 1e15], Gt: [6, 1e15], pound: [6, 453.59237], pounds: [6, 453.59237], lb: [6, 453.59237], stone: [6, 6350.29318], stones: [6, 6350.29318], st: [6, 6350.29318], ounce: [6, 28.349523125], ounces: [6, 28.349523125], oz: [6, 28.349523125], "short ton": [6, 907184.74], "short tons": [6, 907184.74], "US ton": [6, 907184.74], "US tons": [6, 907184.74], "long ton": [6, 1016046.9088], "long tons": [6, 1016046.9088], "imperial ton": [6, 1016046.9088], "imperial tons": [6, 1016046.9088], "displacement ton": [6, 1016046.9088], "displacement tons": [6, 1016046.9088], watt: [7, 1], watts: [7, 1], W: [7, 1], petawatt: [7, 1e15], petawatts: [7, 1e15], PW: [7, 1e15], terawatt: [7, 1e12], terawatts: [7, 1e12], TW: [7, 1e12], gigawatt: [7, 1e9], gigawatts: [7, 1e9], GW: [7, 1e9], megawatt: [7, 1e6], megawatts: [7, 1e6], MW: [7, 1e6], kilowatt: [7, 1e3], kilowatts: [7, 1e3], kW: [7, 1e3], hectowatt: [7, 100], hectowatts: [7, 100], hW: [7, 100], decawatt: [7, 10], decawatts: [7, 10], daW: [7, 10], deciwatt: [7, .1], deciwatts: [7, .1], dW: [7, .1], centiwatt: [7, .01], centiwatts: [7, .01], cW: [7, .01], milliwatt: [7, .001], milliwatts: [7, .001], mW: [7, .001], microwatt: [7, 1e-6], microwatts: [7, 1e-6], "μW": [7, 1e-6], "µW": [7, 1e-6], nanowatt: [7, 1e-9], nanowatts: [7, 1e-9], nW: [7, 1e-9], picowatt: [7, 1e-12], picowatts: [7, 1e-12], pW: [7, 1e-12], femtowatt: [7, 1e-15], femtowatts: [7, 1e-15], fW: [7, 1e-15], horsepower: [7, 745.699872], "mechanical horsepower": [7, 745.699872], hp: [7, 745.699872], pascal: [8, 1], pascals: [8, 1], Pa: [8, 1], petapascal: [8, 1e15], petapascals: [8, 1e15], PPa: [8, 1e15], terapascal: [8, 1e12], terapascals: [8, 1e12], TPa: [8, 1e12], gigapascal: [8, 1e9], gigapascals: [8, 1e9], GPa: [8, 1e9], megapascal: [8, 1e6], megapascals: [8, 1e6], MPa: [8, 1e6], kilopascal: [8, 1e3], kilopascals: [8, 1e3], kPa: [8, 1e3], hectopascal: [8, 100], hectopascals: [8, 100], hPa: [8, 100], decapascal: [8, 10], decapascals: [8, 10], daPa: [8, 10], decipascal: [8, .1], decipascals: [8, .1], dPa: [8, .1], centipascal: [8, .01], centipascals: [8, .01], cPa: [8, .01], millipascal: [8, .001], millipascals: [8, .001], mPa: [8, .001], micropascal: [8, 1e-6], micropascals: [8, 1e-6], "μPa": [8, 1e-6], "µPa": [8, 1e-6], nanopascal: [8, 1e-9], nanopascals: [8, 1e-9], nPa: [8, 1e-9], picopascal: [8, 1e-12], picopascals: [8, 1e-12], pPa: [8, 1e-12], femtopascal: [8, 1e-15], femtopascals: [8, 1e-15], fPa: [8, 1e-15], bar: [8, 1e5], bars: [8, 1e5], petabar: [8, 1e20], petabars: [8, 1e20], Pbar: [8, 1e20], terabar: [8, 1e17], terabars: [8, 1e17], Tbar: [8, 1e17], gigabar: [8, 1e14], gigabars: [8, 1e14], Gbar: [8, 1e14], megabar: [8, 1e11], megabars: [8, 1e11], Mbar: [8, 1e11], kilobar: [8, 1e8], kilobars: [8, 1e8], kbar: [8, 1e8], hectobar: [8, 1e7], hectobars: [8, 1e7], hbar: [8, 1e7], decabar: [8, 1e6], decabars: [8, 1e6], dabar: [8, 1e6], decibar: [8, 1e4], decibars: [8, 1e4], dbar: [8, 1e4], centibar: [8, 1e3], centibars: [8, 1e3], cbar: [8, 1e3], millibar: [8, 100], millibars: [8, 100], mbar: [8, 100], microbar: [8, .1], microbars: [8, .1], "μbar": [8, .1], "µbar": [8, .1], nanobar: [8, 1e-4], nanobars: [8, 1e-4], nbar: [8, 1e-4], picobar: [8, 1e-7], picobars: [8, 1e-7], pbar: [8, 1e-7], femtobar: [8, 1e-10], femtobars: [8, 1e-10], fbar: [8, 1e-10], torr: [8, 133.32236842105263], torrs: [8, 133.32236842105263], Torr: [8, 133.32236842105263], millitorr: [8, .13332236842105263], mTorr: [8, .13332236842105263], atmosphere: [8, 101325], atmospheres: [8, 101325], atm: [8, 101325], "pound per square inch": [8, 6894.757], "pounds per square inch": [8, 6894.757], psi: [8, 6894.757], "lbf/in2": [8, 6894.757], "lbf/in²": [8, 6894.757], kelvin: [9, 1], kelvins: [9, 1], K: [9, 1], petakelvin: [9, 1e15], petakelvins: [9, 1e15], PK: [9, 1e15], terakelvin: [9, 1e12], terakelvins: [9, 1e12], TK: [9, 1e12], gigakelvin: [9, 1e9], gigakelvins: [9, 1e9], GK: [9, 1e9], megakelvin: [9, 1e6], megakelvins: [9, 1e6], MK: [9, 1e6], kilokelvin: [9, 1e3], kilokelvins: [9, 1e3], kK: [9, 1e3], hectokelvin: [9, 100], hectokelvins: [9, 100], hK: [9, 100], decakelvin: [9, 10], decakelvins: [9, 10], daK: [9, 10], decikelvin: [9, .1], decikelvins: [9, .1], dK: [9, .1], centikelvin: [9, .01], centikelvins: [9, .01], cK: [9, .01], millikelvin: [9, .001], millikelvins: [9, .001], mK: [9, .001], microkelvin: [9, 1e-6], microkelvins: [9, 1e-6], "μK": [9, 1e-6], "µK": [9, 1e-6], nanokelvin: [9, 1e-9], nanokelvins: [9, 1e-9], nK: [9, 1e-9], picokelvin: [9, 1e-12], picokelvins: [9, 1e-12], pK: [9, 1e-12], femtokelvin: [9, 1e-15], femtokelvins: [9, 1e-15], fK: [9, 1e-15], fahrenheit: [9, .5555555555555556], F: [9, .5555555555555556], celsius: [9, 1], C: [9, 1], rankine: [9, .5555555555555556], R: [9, .5555555555555556], second: [10, 1], seconds: [10, 1], s: [10, 1], petasecond: [10, 1e15], petaseconds: [10, 1e15], Ps: [10, 1e15], terasecond: [10, 1e12], teraseconds: [10, 1e12], Ts: [10, 1e12], gigasecond: [10, 1e9], gigaseconds: [10, 1e9], Gs: [10, 1e9], megasecond: [10, 1e6], megaseconds: [10, 1e6], Ms: [10, 1e6], kilosecond: [10, 1e3], kiloseconds: [10, 1e3], ks: [10, 1e3], hectosecond: [10, 100], hectoseconds: [10, 100], hs: [10, 100], decasecond: [10, 10], decaseconds: [10, 10], das: [10, 10], decisecond: [10, .1], deciseconds: [10, .1], ds: [10, .1], centisecond: [10, .01], centiseconds: [10, .01], cs: [10, .01], millisecond: [10, .001], milliseconds: [10, .001], ms: [10, .001], microsecond: [10, 1e-6], microseconds: [10, 1e-6], "μs": [10, 1e-6], "µs": [10, 1e-6], nanosecond: [10, 1e-9], nanoseconds: [10, 1e-9], ns: [10, 1e-9], picosecond: [10, 1e-12], picoseconds: [10, 1e-12], ps: [10, 1e-12], femtosecond: [10, 1e-15], femtoseconds: [10, 1e-15], fs: [10, 1e-15], minute: [10, 60], minutes: [10, 60], min: [10, 60], hour: [10, 3600], hours: [10, 3600], h: [10, 3600], milliday: [10, 86.4], millidays: [10, 86.4], md: [10, 86.4], day: [10, 86400], days: [10, 86400], d: [10, 86400], week: [10, 604800], weeks: [10, 604800], wk: [10, 604800], fortnight: [10, 1209600], fortnights: [10, 1209600], fn: [10, 1209600], month: [10, 2592e3], months: [10, 2592e3], mo: [10, 2592e3], year: [10, 31536e3], years: [10, 31536e3], a: [10, 31536e3], y: [10, 31536e3], yr: [10, 31536e3], decade: [10, 315569520], decades: [10, 315569520], dec: [10, 315569520], century: [10, 3155695200], centuries: [10, 3155695200], millennium: [10, 31556952e3], millennia: [10, 31556952e3], moment: [10, 90], moments: [10, 90], shake: [10, 1e-8], shakes: [10, 1e-8], "time unit": [10, .001024], TU: [10, .001024], svedberg: [10, 1e-13], svedbergs: [10, 1e-13], S: [10, 1e-13], "cubic meter": [11, 1], "cubic meters": [11, 1], "cubic metre": [11, 1], "cubic metres": [11, 1], stere: [11, 1], steres: [11, 1], "m³": [11, 1], m3: [11, 1], "cubic petameter": [11, 1e45], "cubic petameters": [11, 1e45], Pm3: [11, 1e45], "Pm³": [11, 1e45], "cubic terameter": [11, 1e36], "cubic terameters": [11, 1e36], Tm3: [11, 1e36], "Tm³": [11, 1e36], "cubic gigameter": [11, 1e27], "cubic gigameters": [11, 1e27], Gm3: [11, 1e27], "Gm³": [11, 1e27], "cubic megameter": [11, 1e18], "cubic megameters": [11, 1e18], Mm3: [11, 1e18], "Mm³": [11, 1e18], "cubic kilometer": [11, 1e9], "cubic kilometers": [11, 1e9], km3: [11, 1e9], "km³": [11, 1e9], "cubic hectometer": [11, 1e6], "cubic hectometers": [11, 1e6], hm3: [11, 1e6], "hm³": [11, 1e6], "cubic decameter": [11, 1e3], "cubic decameters": [11, 1e3], dam3: [11, 1e3], "dam³": [11, 1e3], "cubic decimeter": [11, .001], "cubic decimeters": [11, .001], dm3: [11, .001], "dm³": [11, .001], "cubic centimeter": [11, 1e-6], "cubic centimeters": [11, 1e-6], cm3: [11, 1e-6], "cm³": [11, 1e-6], "cubic millimeter": [11, 1e-9], "cubic millimeters": [11, 1e-9], mm3: [11, 1e-9], "mm³": [11, 1e-9], "cubic micrometer": [11, 1e-18], "cubic micrometers": [11, 1e-18], "μm3": [11, 1e-18], "µm3": [11, 1e-18], "μm³": [11, 1e-18], "µm³": [11, 1e-18], "cubic nanometer": [11, 1e-27], "cubic nanometers": [11, 1e-27], nm3: [11, 1e-27], "nm³": [11, 1e-27], "cubic picometer": [11, 1e-36], "cubic picometers": [11, 1e-36], pm3: [11, 1e-36], "pm³": [11, 1e-36], "cubic femtometer": [11, 1e-45], "cubic femtometers": [11, 1e-45], fm3: [11, 1e-45], "fm³": [11, 1e-45], liter: [11, .001], liters: [11, .001], litre: [11, .001], litres: [11, .001], l: [11, .001], L: [11, .001], petaliter: [11, 1e12], petaliters: [11, 1e12], petalitre: [11, 1e12], petalitres: [11, 1e12], Pl: [11, 1e12], PL: [11, 1e12], teraliter: [11, 1e9], teraliters: [11, 1e9], teralitre: [11, 1e9], teralitres: [11, 1e9], Tl: [11, 1e9], TL: [11, 1e9], gigaliter: [11, 1e6], gigaliters: [11, 1e6], gigalitre: [11, 1e6], gigalitres: [11, 1e6], Gl: [11, 1e6], GL: [11, 1e6], megaliter: [11, 1e3], megaliters: [11, 1e3], megalitre: [11, 1e3], megalitres: [11, 1e3], Ml: [11, 1e3], ML: [11, 1e3], kiloliter: [11, 1], kiloliters: [11, 1], kilolitre: [11, 1], kilolitres: [11, 1], kl: [11, 1], kL: [11, 1], hectoliter: [11, .1], hectoliters: [11, .1], hectolitre: [11, .1], hectolitres: [11, .1], hl: [11, .1], hL: [11, .1], decaliter: [11, .01], decaliters: [11, .01], decalitre: [11, .01], decalitres: [11, .01], dal: [11, .01], daL: [11, .01], deciliter: [11, 1e-4], deciliters: [11, 1e-4], decilitre: [11, 1e-4], decilitres: [11, 1e-4], dl: [11, 1e-4], dL: [11, 1e-4], centiliter: [11, 1e-5], centiliters: [11, 1e-5], centilitre: [11, 1e-5], centilitres: [11, 1e-5], cl: [11, 1e-5], cL: [11, 1e-5], milliliter: [11, 1e-6], milliliters: [11, 1e-6], millilitre: [11, 1e-6], millilitres: [11, 1e-6], ml: [11, 1e-6], mL: [11, 1e-6], microliter: [11, 1e-9], microliters: [11, 1e-9], microlitre: [11, 1e-9], microlitres: [11, 1e-9], "μl": [11, 1e-9], "µl": [11, 1e-9], "μL": [11, 1e-9], "µL": [11, 1e-9], nanoliter: [11, 1e-12], nanoliters: [11, 1e-12], nanolitre: [11, 1e-12], nanolitres: [11, 1e-12], nl: [11, 1e-12], nL: [11, 1e-12], picoliter: [11, 1e-15], picoliters: [11, 1e-15], picolitre: [11, 1e-15], picolitres: [11, 1e-15], pl: [11, 1e-15], pL: [11, 1e-15], femtoliter: [11, 1e-18], femtoliters: [11, 1e-18], femtolitre: [11, 1e-18], femtolitres: [11, 1e-18], fl: [11, 1e-18], fL: [11, 1e-18], "cubic mile": [11, 4200], "cubic miles": [11, 4200], "cu mi": [11, 4200], mi3: [11, 4200], "mi³": [11, 4200], "acre-foot": [11, 1233.48183754752], "acre-feet": [11, 1233.48183754752], "ac⋅ft": [11, 1233.48183754752], "ac ft": [11, 1233.48183754752], "cubic yard": [11, .76], "cubic yards": [11, .76], "cu yd": [11, .76], yd3: [11, .76], "yd³": [11, .76], "cubic foot": [11, .028316846592], "cubic feet": [11, .028316846592], "cu ft": [11, .028316846592], ft3: [11, .028316846592], "ft³": [11, .028316846592], "board foot": [11, .002359737], "board feet": [11, .002359737], "cubic inch": [11, 16387064e-12], "cubic inches": [11, 16387064e-12], "cu in": [11, 16387064e-12], in3: [11, 16387064e-12], "in³": [11, 16387064e-12], "measurement ton": [11, 1.133], "measurement tons": [11, 1.133], MTON: [11, 1.133], "imperial barrel": [11, .16], "imperial barrels": [11, .16], "imp bbl": [11, .16], "imperial bushel": [11, .03636872], "imperial bushels": [11, .03636872], "imp bsh": [11, .03636872], "imp bu": [11, .03636872], "imperial peck": [11, .00909218], "imperial pecks": [11, .00909218], pk: [11, .00909218], "imp pk": [11, .00909218], "imperial gallon": [11, .00454609], "imperial gallons": [11, .00454609], "imp gal": [11, .00454609], "imperial quart": [11, .0011365225], "imperial quarts": [11, .0011365225], "imp qt": [11, .0011365225], "imperial pint": [11, .00056826125], "imperial pints": [11, .00056826125], "imp pt": [11, .00056826125], "imperial fluid ounce": [11, 284130625e-13], "imperial fluid ounces": [11, 284130625e-13], "imp fl oz": [11, 284130625e-13], teaspoon: [11, 492892159375e-17], teaspoons: [11, 492892159375e-17], "US teaspoon": [11, 492892159375e-17], "US teaspoons": [11, 492892159375e-17], tsp: [11, 492892159375e-17], tablespoon: [11, 1478676478125e-17], tablespoons: [11, 1478676478125e-17], "US tablespoon": [11, 1478676478125e-17], "US tablespoons": [11, 1478676478125e-17], tbsp: [11, 1478676478125e-17], "US fluid ounce": [11, 295735295625e-16], "US fluid ounces": [11, 295735295625e-16], "fl oz": [11, 295735295625e-16], "fl. oz.": [11, 295735295625e-16], "oz. fl.": [11, 295735295625e-16], cup: [11, .0002365882365], cups: [11, .0002365882365], c: [11, .0002365882365], "US legal cup": [11, 24e-5], "US legal cups": [11, 24e-5], "US lc": [11, 24e-5], pint: [11, .000473176473], pints: [11, .000473176473], "US liquid pint": [11, .000473176473], "US liquid pints": [11, .000473176473], pt: [11, .000473176473], p: [11, .000473176473], quart: [11, .000946352946], quarts: [11, .000946352946], "US liquid quart": [11, .000946352946], "US liquid quarts": [11, .000946352946], qt: [11, .000946352946], gallon: [11, .003785411784], gallons: [11, .003785411784], "US liquid gallon": [11, .003785411784], "US liquid gallons": [11, .003785411784], gal: [11, .003785411784], "US bushel": [11, .03523907016688], "US bushels": [11, .03523907016688], "US bsh": [11, .03523907016688], "US bu": [11, .03523907016688], "US peck": [11, .00880976754172], "US pk": [11, .00880976754172], "US dry gallon": [11, .00440488377086], "US dry gal": [11, .00440488377086], "US dry barrel": [11, .1156], "US dry barrels": [11, .1156], "US dry bbl": [11, .1156], "US dry quart": [11, .001101220942715], "US dry qt": [11, .001101220942715], "US dry pint": [11, .0005506104713575], "US dry pt": [11, .0005506104713575] }, i = { fahrenheit: 459.67, F: 459.67, celsius: 273.15, C: 273.15 }, a = 10; function r(e, r, s) { let m = t[s]; if (!m) throw new RangeError(s + " is not a valid unit"); let o = t[e]; if (o[0] !== m[0]) if (o[0] === a && "m" === s) m = t.min; else { if ("m" !== e || m[0] !== a) throw new RangeError(`Cannot convert between different measures: ${e} and ${s}`); o = t.min } const c = o[1], n = m[1]; if ("bigint" == typeof r) { if ((e in i || s in i) && i[e] !== i[s]) throw new RangeError(`Conversion for ${e} to ${s} cannot be calculated as one of the units has a conversion difference which cannot be expressed with bigints`); return r * BigInt(c) / BigInt(n) } return e in i ? s in i ? (r + i[e]) * (c / n) - i[s] : (r + i[e]) * (c / n) : s in i ? r * (c / n) - i[s] : r * (c / n) } function s(i, a) { return "best" === i ? function (i, a, s) { const m = e["imperial" === s ? 1 : 0][t[a][0]], o = m[0][0]; let c = o; const n = r(a, i, o), l = n < 0 ? -n : n; for (let e = 0; e < m.length; e++) { const t = m[e]; if (!(l >= t[1])) break; c = t[0] } const u = r(a, i, c); return { quantity: u, unit: c, toString: "bigint" == typeof i ? () => u + c : e => (e === undefined ? u : u.toFixed(e)) + c } }(this.i, this.o, a ?? "metric") : r(this.o, this.i, i) } function m(e, i) { if (!(i in t)) throw new RangeError(i + " is not a valid unit"); return { to: s.bind({ i: e, o: i }) } } const o = /(-?(?:\d+)?\.?\d+)(\S+)/g; function c(e, t) { const i = "best" === e; let a, r = 0, s = !0; do { const t = m(Number(this.u[1]), this.u[2]).to(i && !s ? a : e); i && s ? (r += t.quantity, a = t.unit, s = !1) : r += t, this.u = o.exec(this.k) } while (this.u); return i ? m(r, a).to("best", t) : r } function n(e) { o.lastIndex = 0; const t = o.exec(e); if (!t) throw new RangeError("value did not match expression " + o.source); return { to: c.bind({ u: t, k: e }) } } function l(e) { return "string" == typeof e ? n(e).to("ms") : "" + m(e, "ms").to("best") } export { m as convert, n as convertMany, m as default, l as ms };
//# sourceMappingURL=/sm/e73704c592fcae696c77c83eb0728f45f36cdea4b77838ca4700711a54db2790.map

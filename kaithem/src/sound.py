#Copyright Daniel Dunn 2013-2015
#This file is part of Kaithem Automation.

#Kaithem Automation is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, version 3.

#Kaithem Automation is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with Kaithem Automation.  If not, see <http://www.gnu.org/licenses/>.

import subprocess,os,math,time,sys,threading, collections,logging,re
from . import  util, scheduling,directories,workers, registry,widgets
from .config import config


from . import gstwrapper, jackmanager, jackmixer
from . import registry
log= logging.getLogger("system.sound")

if registry.get("/system/sound/usejack",None)=="manage":
    try:
        jackmanager.startManagingJack()
    except:
        log.exception("Error managing JACK")

jackAPIWidget = None

class SoundDeviceAlias():
    """An object meant to be looked up by alias, that tells you how to access the sound device it describes,
        using various drivers."""

    jackName = None
    alsaName = None
    pulseName = None

    @property
    def mplayerName(self):
        """The name as you would pass it to a -ao flag for mplayer"""
        if self.alsaName == None:
            if self.jackName == None:
                return None
            return "jack:"+ self.jackName.replace(":","=").replace(",",".")
        return "alsa:device="+ self.alsaName.replace(":","=").replace(",",".")


aliasesLock = threading.Lock()

commonSoundAliases = {}
otherSoundAliases = {}
userSoundAliases = {}

def listSoundCardsByPersistentName():
    """
        Only works on linux or maybe mac

       List devices in a dict indexed by human-readable and persistant easy to memorize
       Identifiers. Output is tuples:
       (cardnamewithsubdev(Typical ASLA identifier),physicalDevice(persistent),devicenumber, subdevice)

       Indexed by a long name that contains the persistant locator, subdevice,
       prefixed by three words chosen based on a hash, to help you remember.

       An example of a generated name: 'reformerdatebookmaturity-HDMI2-0xef128000irq129:8'
    """
    with open("/proc/asound/cards") as f:
        c = f.read()

    #RE pattern produces cardnumber, cardname, locator
    c = re.findall(r"[\n\r]*\s*(\d)+\s*\[(\w+)\s*\]:\s*.*?[\n\r]+\s*.*? at (.*?)[\n\r]+",c)

    cards = {}
    #find physical cards
    for i in c:
        n = i[2].strip().replace(" ","").replace(",fullspeed","").replace("[","").replace("]","")
        cards[i[0]] = n

    x = subprocess.check_output(['aplay','-l']).decode("utf8")


    #Groups are cardnumber, cardname, subdevice, longname
    sd = re.findall(r"card (\d+): (\w*)\s\[.*?\], device (\d*): (.*?)\s+\[.*?]",x)

    d = {}

 
    for i in sd:
        #We generate a name that contains both the device path and subdevice
        generatedName = cards[i[0]]+":"+i[2]

        h = util.memorableHash(cards[i[0]]+":"+i[2])
        n = i[3].replace(" ","").replace("\n","")
        try:
            d[n+'-'+h+"-"+generatedName]  = ("hw:"+i[0]+","+i[2], cards[i[0]], (int(i[0]), int(i[2])))
        except KeyError:
            d[n+'-'+h+"-"+generatedName] = ("hw:"+i[0]+","+i[2], cards[i[0]], int(i[0]), int(i[2]))

    return d



lastRefreshedGeneratedAliases = 0

def refreshAutoGeneratedSoundAliases():
    lastRefreshedGeneratedAliases = time.time()

    commonSoundAliasesl = {}

    #Get the ALSA devices
    try:
        x =  listSoundCardsByPersistentName()
        for i in x:
            p = SoundDeviceAlias()
            p.alsaName= x[i][0]
            commonSoundAliasesl[i] = p
    except:
        pass

   

    #get the JACK devices    
    try:
        import jack
        client = jack.Client('PortInspectingClientKaithem',no_start_server=True)

        done ={}
        for i in client.get_ports(is_audio=True, is_output=False):
            cn=i.name.split(":")[0]
            if cn in done:
                continue
            done[cn]=True
            p = SoundDeviceAlias()
            p.jackName = i.cn
            commonSoundAliasesl[cn] = p
   
    except:
        pass

    finally:     
        client.deactivate()
        client.close()
    global commonSoundAliases
    commonSoundAliases = commonSoundAliasesl

def getAvailableCards():
   if time.time()-lastRefreshedGeneratedAliases > 20:
        refreshAutoGeneratedSoundAliases()
   return commonSoundAliases


sound_paths = [""]

p = config['audio-paths']
for i in p:
    if i== 'default':
        sound_paths.append(os.path.join(directories.datadir,"sounds"))
    else:
        sound_paths.append(i)

builtinSounds = os.listdir(os.path.join(directories.datadir,"sounds"))

def soundPath(fn,extrapaths=[]):
    "Get the full path of a sound file by searching"
    filename = util.search_paths(fn, extrapaths)
    if not filename:
        filename = util.search_paths(fn, sound_paths)
    #Raise an error if the file doesn't exist
    if not filename or not os.path.isfile(filename):
        raise ValueError("Specified audio file '"+fn+"' was not found")
    return filename


#This class provides some infrastructure to play sounds but if you use it directly it is a dummy.
class SoundWrapper(object):

    backendname = "Dummy Sound Driver(No real sound player found)"
    def __init__(self):
        #Prefetch cache for preloadng sound effects
        self.cache = collections.OrderedDict()
        self.runningSounds = {}

    def readySound(self, *args,**kwargs):
        pass

    #little known fact: Kaithem is actually a large collection of
    #mini garbage collectors and bookkeeping code...
    def deleteStoppedSounds(self):
        x = list(self.runningSounds.keys())
        for i in x:
            try:
                if not self.runningSounds[i].isPlaying():
                    self.runningSounds.pop(i)
            except KeyError:
                pass

    def stopAllSounds(self):
        x = list(self.runningSounds.keys())
        for i in x:
            try:
                self.runningSounds.pop(i)
            except KeyError:
                pass

    def getPosition(self,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].position()
        except KeyError:
            return False

    def setVolume(self,channel = "PRIMARY"):
        pass

    def setEQ(self,channel="PRIMARY"):
        pass

    def playSound(self,filename,handle="PRIMARY",**kwargs):
        pass

    def stopSound(self, handle ="PRIMARY"):
        pass

    def isPlaying(self,handle="blah"):
        return False

    def pause(self, handle ="PRIMARY"):
        pass

    def resume(self,  handle ="PRIMARY"):
        pass
    
    def fadeTo(self, handle="PRIMARY"):
        self.playSound(self,handle)
        
        
class MadPlayWrapper(SoundWrapper):
    backendname = "MadPlay Sound Player"

    #What this does is it keeps a reference to the sound player process and
    #If the object is destroyed it destroys the process stopping the sound
    #It also abstracts checking if its playing or not.
    class MadPlaySoundContainer(object):
        def __init__(self,filename,**kwargs):
            f = open(os.devnull,"w")
            g = open(os.devnull,"w")
            cmd = ["madplay", filename]
            self.loopcounter = -1 if kwargs.get('loop',False) is True else kwargs.get('loop',False)-1            
            if self.loopcounter:
                    self.end = False
                    def loop_play_again():
                        self.process.poll()
                        if self.process.returncode ==None:
                            return True
                        if not self in backend.runningSounds.values():
                            return False
                        if not self.loopcounter:
                            return False
                        if self.end:
                            return
                        self.loopcounter -=1
                        try:
                            self.process.terminate()
                        except:
                            pass
                        self.process = subprocess.Popen(cmd, stdout=f, stderr=g)
                        return True
                    self.loop_repeat_func = loop_play_again
                    scheduling.RepeatWhileEvent(loop_play_again, 0.05).register()
            self.process = subprocess.Popen(cmd, stdout=f, stderr=g)
            
        def __del__(self):
            try:
                self.process.terminate()
                del self.loop_repeat_func
            except:
                pass

        def isPlaying(self):
            self.process.poll()
            return self.process.returncode == None or bool(self.loopcounter)

    def playSound(self,filename,handle="PRIMARY",extraPaths=[],**kwargs):
        #Those old sound handles won't garbage collect themselves
        self.deleteStoppedSounds()            
        fn = soundPath(filename,extraPaths)
   
        #Play the sound with a background process and keep a reference to it
        self.runningSounds[handle] = self.MadPlaySoundContainer(fn,**kwargs)

    def stopSound(self, handle ="PRIMARY"):
        #Delete the sound player reference object and its destructor will stop the sound
            if handle in self.runningSounds:
                #Instead of using a lock lets just catch the error is someone else got there first.
                try:
                    del self.runningSounds[handle]
                except KeyError:
                    pass
        
    def stopAllSounds(self):
        x = list(self.runningSounds.keys())
        for i in x:
            try:
                self.runningSounds[i].end = True
                self.runningSounds.pop(i)
            except KeyError:
                raise

class Mpg123Wrapper(SoundWrapper):
    backendname = "MPG123 Sound Player"

    #What this does is it keeps a reference to the sound player process and
    #If the object is destroyed it destroys the process stopping the sound
    #It also abstracts checking if its playing or not.
    class Mpg123SoundContainer(object):
        def __init__(self,filename,**kwargs):
            f = open(os.devnull,"w")
            g = open(os.devnull,"w")
            cmd = ["mpg123", filename]
            self.loopcounter = -1 if kwargs.get('loop') is True else  kwargs.get('loop')-1            
            if self.loopcounter:
                    self.end = False
                    def loop_play_again():
                        self.process.poll()
                        if self.process.returncode ==None:
                            return True
                        if not self in backend.runningSounds.values():
                            return False
                        if not self.loopcounter:
                            return False
                        if self.end:
                            return
                        self.loopcounter -=1
                        try:
                            self.process.terminate()
                        except:
                            pass
                        self.process = subprocess.Popen(cmd, stdout=f, stderr=g)
                        return True
                    self.loop_repeat_func = loop_play_again
                    scheduling.RepeatWhileEvent(loop_play_again, 0.05).register()
            self.process = subprocess.Popen(cmd, stdout=f, stderr=g)
            
        def __del__(self):
            try:
                self.process.terminate()
                del self.loop_repeat_func
            except:
                pass

        def isPlaying(self):
            self.process.poll()
            return self.process.returncode == None or bool(self.loopcounter)

    def playSound(self,filename,handle="PRIMARY",extraPaths=[],**kwargs):
        #Those old sound handles won't garbage collect themselves
        self.deleteStoppedSounds()
        
        fn = soundPath(filename,extraPaths)

        #Play the sound with a background process and keep a reference to it
        self.runningSounds[handle] = self.Mpg123SoundContainer(fn,**kwargs)

    def stopSound(self, handle ="PRIMARY"):
        #Delete the sound player reference object and its destructor will stop the sound
            if handle in self.runningSounds:
                #Instead of using a lock lets just catch the error is someone else got there first.
                try:
                    del self.runningSounds[handle]
                except KeyError:
                    pass
        
    def stopAllSounds(self):
        x = list(self.runningSounds.keys())
        for i in x:
            try:
                self.runningSounds[i].end = True
                self.runningSounds.pop(i)
            except KeyError:
                raise

class SOXWrapper(SoundWrapper):
    backendname = "SOund eXchange"

    #What this does is it keeps a reference to the sound player process and
    #If the object is destroyed it destroys the process stopping the sound
    #It also abstracts checking if its playing or not.
    class SOXSoundContainer(object):
        def __init__(self,filename,vol,start,end,loop=1):
            f = open(os.devnull,"w")
            g = open(os.devnull,"w")
            self.started = time.time()
            self.process = subprocess.Popen(["play",filename,"vol",str(vol),"trim",str(start),str(end)], stdout = f, stderr = g)
            self.loopcounter = -1 if loop is True else loop-1            
            if self.loopcounter:
                    self.end = False
                    def loop_play_again():
                        self.process.poll()
                        if self.process.returncode ==None:
                            return True
                        if not self in backend.runningSounds.values():
                            return False
                        if not self.loopcounter:
                            return False
                        if self.end:
                            return
                        self.loopcounter -=1
                        try:
                            self.process.terminate()
                        except:
                            pass
                        self.process = subprocess.Popen(["play",filename,"vol",str(vol),"trim",str(start),str(end)], stdout = f, stderr = g)
                        return True
                    self.loop_repeat_func = loop_play_again
                    scheduling.RepeatWhileEvent(loop_play_again, 0.02).register()
            else:
                self.process = subprocess.Popen(["play",filename,"vol",str(vol),"trim",str(start),str(end)], stdout = f, stderr = g)

      
          
        def __del__(self):
            try:
                self.process.terminate()
                del self.loop_repeat_func
            except:
                pass

        def isPlaying(self):
            self.process.poll()
            return self.process.returncode == None or bool(self.loopcounter)

        def position(self):
            return self.started
        
    def stopAllSounds(self):
        x = list(self.runningSounds.keys())
        for i in x:
            try:
                self.runningSounds[i].end = True
                self.runningSounds.pop(i)
            except KeyError:
                raise

    def playSound(self,filename,handle="PRIMARY",extraPaths=[],**kwargs):

        if 'volume' in kwargs:
            #odd way of throwing errors on non-numbers
            v  = float(kwargs['volume'])
        else:
            v =1;

        if 'start' in kwargs:
            #odd way of throwing errors on non-numbers
            start  = float(kwargs['start'])
        else:
            start =0

        if 'end' in kwargs:
            #odd way of throwing errors on non-numbers
            end  = float(kwargs['end'])
        else:
            end ="-0"

    
        #Those old sound handles won't garbage collect themselves
        self.deleteStoppedSounds()
        #Raise an error if the file doesn't exist
        fn = soundPath(filename,extraPaths)

        #Play the sound with a background process and keep a reference to it
        self.runningSounds[handle] = self.SOXSoundContainer(fn, v,start,end,loop=kwargs.get('loop',1))

    def stopSound(self, handle ="PRIMARY"):
        #Delete the sound player reference object and its destructor will stop the sound
            if handle in self.runningSounds:
                #Instead of using a lock lets just catch the error is someone else got there first.
                try:
                    self.runningSounds[i].end = True
                    del self.runningSounds[handle]
                except KeyError:
                    pass

    def isPlaying(self,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].isPlaying()
        except KeyError:
            return False


class MPlayerWrapper(SoundWrapper):
    backendname = "MPlayer"

    #What this does is it keeps a reference to the sound player process and
    #If the object is destroyed it destroys the process stopping the sound
    #It also abstracts checking if its playing or not.
    class MPlayerSoundContainer(object):
        def __init__(self,filename,vol,start,end,extras,**kw):
            self.lock = threading.RLock()
            f = open(os.devnull,"w")
            g = open(os.devnull,"w")
            self.nocallback = False
            self.paused = False
            self.volume = vol
            cmd = ["mplayer" , "-slave" , "-quiet", "-softvol" ,"-ss", str(start)]

            if not 'eq' in extras:
                cmd.extend(["-af", "equalizer=0:0:0:0:0:0:0:0:0:0,volume="+str(10*math.log10(vol or 10**-30))])
            if end:
                cmd.extend(["-endpos",str(end)])

            if "output" in kw and kw['output']:
                x = kw['output']

                #Try to resolve it as an identifier.
                getAvailableCards()
                if x in commonSoundAliases:
                    x = commonSoundAliases[x].mplayerName
                
                cmd.extend(["-ao",x])


            if "video_output" in kw:
                cmd.extend(["-vo",kw['output']])

            if "fs" in kw and kw['fs']:
                cmd.extend(["-fs"])

            if "novideo" in kw and kw['novideo']:
                cmd.extend(["-novideo"])
            
            if "pan" in kw and kw['pan']:
                pan = ",pan="+":".join(str(i) for i in kw["pan"])
            else:
                pan = ""

            if 'eq' in extras:
                if extras['eq'] == 'party':
                    cmd.extend(['-af','equalizer=0:1.5:2:-7:-10:-5:-10:-10:1:1,volume='+str((10*math.log10(vol or 10**-30)+5))+pan
                    
                    ])
                else:
                    cmd.extend(['-af','equalizer=' +":".join(extras['eq'])+",volume="+str((10*math.log10(vol or 10**-30)+5))+pan
                    ])
            if 'loop' in kw:
                cmd.extend(["-loop", str(0 if kw['loop'] is True else int(kw['loop']))])

            self.started = time.time()
            cmd.append(filename)
            self.process = subprocess.Popen(cmd,stdin=subprocess.PIPE, stdout = f, stderr = g)
            #We don't want to slow things down by waiting, but we can at least catch some of the errors that happen fast.
            self.process.poll()
            if not self.process.returncode in (None,0):
                raise RuntimeError("Mplayer nonzero error code: "+str(self.process.returncode))
                
            x= kw.get('callback',False)
            if x:
                def f():
                    if self.isPlaying():
                        return True
                    else:
                        if not self.nocallback:
                            x()
                        return False
                self.callback = f
                scheduling.RepeatWhileEvent(f,0.1).register()
                        
                    

        def __del__(self):
            try:
                self.process.terminate()
                self.process.stdout.close()
                self.process.stderr.close()
                self.process.stdin.close()

            except:
                pass
        def stop(self):
            try:
                self.process.terminate()
                self.process.stdout.close()
                self.process.stderr.close()
                self.process.stdin.close()
            except:
                pass

        def isPlaying(self):
            self.process.poll()
            return self.process.returncode == None

        def position(self):
            return time.time() - self.started

        def wait(self):
            #Block until sound is finished playing.
            self.process.wait()


        def seek(self,position):
            with self.lock:
                if self.isPlaying():
                    try:
                        if sys.version_info < (3,0):
                            self.process.stdin.write(bytes("pausing_keep seek "+str(position)+" 2\n"))
                        else:
                            self.process.stdin.write(bytes("pausing_keep seek "+str(position)+" 2\n",'utf8'))
                        self.process.stdin.flush()
                        self.started = time.time()-position
                    except:
                        pass


        def setVol(self,volume):
            self.volume = volume
            with self.lock:
                if self.isPlaying():
                    try:
                        if sys.version_info < (3,0):
                            self.process.stdin.write(bytes("pausing_keep volume "+str(volume*100)+" 1\n"))
                        else:
                            self.process.stdin.write(bytes("pausing_keep volume "+str(volume*100)+" 1\n",'utf8'))
                        self.process.stdin.flush()
                    except:
                        pass

        def setEQ(self,eq):
            with self.lock:
                if self.isPlaying():
                    try:
                        if sys.version_info < (3,0):
                            self.process.stdin.write(bytes("pausing_keep af_cmdline equalizer "+":".join([str(i) for i in eq]) +"\n"))
                        else:
                            self.process.stdin.write(bytes("pausing_keep af_cmdline equalizer "+":".join([str(i) for i in eq]) +"\n", "utf8"))
                        self.process.stdin.flush()
                    except Exception as e:
                        raise e

        def pause(self):
            with self.lock:
                try:
                    if not self.paused:
                        self.process.stdin.write(b"pause \n")
                        self.process.stdin.flush()
                        self.paused= True
                except:
                    pass

        def resume(self):
            with self.lock:
                try:
                    if self.paused:
                        self.process.stdin.write(b"pause \n")
                        self.process.stdin.flush()
                        self.paused = False
                except:
                    pass

    def playSound(self,filename,handle="PRIMARY",extraPaths=[],**kwargs):
        if 'volume' in kwargs:
            #odd way of throwing errors on non-numbers
            v  = float(kwargs['volume'])
        else:
            v =1;

        if 'start' in kwargs:
            #odd way of throwing errors on non-numbers
            start  = float(kwargs['start'])
        else:
            start =0

        if 'end' in kwargs:
            #odd way of throwing errors on non-numbers
            end  = float(kwargs['end'])
        else:
            end = None

        if 'output' in kwargs:
            e = {"output":kwargs['output']}
        else:
            e = {}

        if 'fs' in kwargs:
            e['fs'] = kwargs['fs']
            
        if 'loop' in kwargs:
            e['loop'] = kwargs['loop']
        if 'pan' in kwargs:
            e['pan'] = kwargs['pan']
            
        if 'novideo' in kwargs:
            e['novideo'] = kwargs['novideo']

        if 'eq' in kwargs:
            extras={'eq':kwargs['eq']}
        else:
            extras={}
        #Those old sound handles won't garbage collect themselves
        self.deleteStoppedSounds()
        #Raise an error if the file doesn't exist
        fn = soundPath(filename,extraPaths)
        print(fn)
        #Play the sound with a background process and keep a reference to it
        self.runningSounds[handle] = self.MPlayerSoundContainer(fn,v,start,end,extras,**e)

    def stopSound(self, handle ="PRIMARY"):
        #Delete the sound player reference object and its destructor will stop the sound
            if handle in self.runningSounds:
                #Instead of using a lock lets just catch the error is someone else got there first.
                try:
                    x= self.runningSounds[handle]
                    del self.runningSounds[handle]
                    x.nocallback = True
                    del x
                except KeyError:
                    pass

    def isPlaying(self,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].isPlaying()
        except KeyError:
            return False

    def wait(self,channel = "PRIMARY"):
        "Block until any sound playing on a channel is finished"
        try:
            self.runningSounds[channel].wait()
        except KeyError:
            return False

    def setVolume(self,vol,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].setVol(vol)
        except KeyError:
            pass

    def seek(self,position,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].seek(position)
        except KeyError:
            pass

    def setEQ(self,eq,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].setEQ(eq)
        except KeyError:
            pass

    def pause(self,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].pause()
        except KeyError:
            pass

    def resume(self,channel = "PRIMARY"):
        "Return true if a sound is playing on channel"
        try:
            return self.runningSounds[channel].resume()
        except KeyError:
            pass

    def fadeTo(self,file,length=1.0, block=False, handle="PRIMARY",**kwargs):
        try:
            x = self.runningSounds[channel]
        except KeyError:
            x = None
        if x and not length:
            x.stop()
            return
        self.playSound(file,handle=handle,**kwargs)
        if not x:
            return
        def f():
            t = time.time()
            try:
                v = x.volume
            except:
                pass
            while x and time.time()-t<length:
                x.setVol(max(0,v*  (1-(time.time()-t)/length)))
                self.setVolume(min(1,kwargs.get('volume',1)*((time.time()-t)/length)),handle)
                time.sleep(1/30.0)
            if x:
                x.stop()
        if block:
            f()
        else:
            workers.do(f)


l = {'sox':SOXWrapper, 'mpg123':Mpg123Wrapper, "mplayer":MPlayerWrapper, "madplay":MadPlayWrapper}


backend = SoundWrapper()
if util.which('pulseaudio'):
    pulseaudio=True
else:
    pulseaudio=False
    
    
for i in config['audio-backends']:
    if util.which(i):
        backend = l[i]()
        break


#Make fake module functions mapping to the bound methods.
playSound = backend.playSound
stopSound = backend.stopSound
isPlaying = backend.isPlaying
resolveSound = soundPath
pause = backend.pause
resume = backend.resume
stopAllSounds = backend.stopAllSounds
setvol = backend.setVolume
setEQ = backend.setEQ
position = backend.getPosition
fadeTo = backend.fadeTo
readySound = backend.readySound

